CCS PCM C Compiler, Version 5.073, 37395               13-Out-17 11:45

               Filename:   C:\Users\victor.andrade\Desktop\Desenvolvimento\PIC Programming\P17_0154 UniLever Fabrica Ola\_lcd_232.lst

               ROM used:   3030 words (74%)
                           Largest free fragment is 777
               RAM used:   118 (46%) at main() level
                           137 (54%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  0B
0001:  MOVWF  0A
0002:  GOTO   34A
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  2B
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BSF    03.6
0019:  MOVF   0D,W
001A:  BCF    03.6
001B:  MOVWF  27
001C:  BSF    03.6
001D:  MOVF   0F,W
001E:  BCF    03.6
001F:  MOVWF  28
0020:  BSF    03.6
0021:  MOVF   0C,W
0022:  BCF    03.6
0023:  MOVWF  29
0024:  BSF    03.6
0025:  MOVF   0E,W
0026:  BCF    03.6
0027:  MOVWF  2A
0028:  BCF    03.7
0029:  BCF    03.5
002A:  MOVLW  8C
002B:  MOVWF  04
002C:  BTFSS  00.5
002D:  GOTO   030
002E:  BTFSC  0C.5
002F:  GOTO   057
0030:  MOVLW  8C
0031:  MOVWF  04
0032:  BTFSS  00.0
0033:  GOTO   036
0034:  BTFSC  0C.0
0035:  GOTO   059
0036:  MOVF   22,W
0037:  MOVWF  04
0038:  MOVF   23,W
0039:  MOVWF  77
003A:  MOVF   24,W
003B:  MOVWF  78
003C:  MOVF   25,W
003D:  MOVWF  79
003E:  MOVF   26,W
003F:  MOVWF  7A
0040:  MOVF   27,W
0041:  BSF    03.6
0042:  MOVWF  0D
0043:  BCF    03.6
0044:  MOVF   28,W
0045:  BSF    03.6
0046:  MOVWF  0F
0047:  BCF    03.6
0048:  MOVF   29,W
0049:  BSF    03.6
004A:  MOVWF  0C
004B:  BCF    03.6
004C:  MOVF   2A,W
004D:  BSF    03.6
004E:  MOVWF  0E
004F:  BCF    03.6
0050:  MOVF   2B,W
0051:  MOVWF  0A
0052:  SWAPF  21,W
0053:  MOVWF  03
0054:  SWAPF  7F,F
0055:  SWAPF  7F,W
0056:  RETFIE
0057:  BCF    0A.3
0058:  GOTO   05B
0059:  BCF    0A.3
005A:  GOTO   09B
.................... /*                     -------------------   Firmware BOmbeiros Paços Ferreira -------------------------------- 
....................                         
.................... */ 
....................  
.................... #include <16f883.h> 
.................... //////////// Standard Header file for the PIC16F883 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F883 
*
00E3:  DATA CD,37
00E4:  DATA E4,37
00E5:  DATA 20,26
00E6:  DATA 69,37
00E7:  DATA E8,30
00E8:  DATA 20,32
00E9:  DATA 65,10
00EA:  DATA C3,37
00EB:  DATA ED,30
00EC:  DATA 6E,32
00ED:  DATA EF,39
00EE:  DATA A0,20
00EF:  DATA 63,3A
00F0:  DATA 69,3B
00F1:  DATA 61,32
00F2:  DATA 6F,05
00F3:  DATA 0D,00
00F4:  DATA CD,37
00F5:  DATA E4,37
00F6:  DATA 20,26
00F7:  DATA 69,37
00F8:  DATA E8,30
00F9:  DATA 20,32
00FA:  DATA 65,10
00FB:  DATA C3,37
00FC:  DATA ED,30
00FD:  DATA 6E,32
00FE:  DATA EF,39
00FF:  DATA 20,22
0100:  DATA E5,39
0101:  DATA E1,31
0102:  DATA F4,34
0103:  DATA F6,30
0104:  DATA E4,37
0105:  DATA 8A,06
0106:  DATA 00,01
0107:  DATA CD,37
0108:  DATA E4,37
0109:  DATA 20,22
010A:  DATA 65,31
010B:  DATA F5,33
010C:  DATA A0,24
010D:  DATA 6E,38
010E:  DATA 75,3A
010F:  DATA 73,10
0110:  DATA 41,3A
0111:  DATA 69,3B
0112:  DATA 61,32
0113:  DATA 6F,05
0114:  DATA 0D,00
0115:  DATA CD,37
0116:  DATA E4,37
0117:  DATA 20,22
0118:  DATA 65,31
0119:  DATA F5,33
011A:  DATA A0,24
011B:  DATA 6E,38
011C:  DATA 75,3A
011D:  DATA 73,10
011E:  DATA C4,32
011F:  DATA F3,30
0120:  DATA F4,34
0121:  DATA F6,30
0122:  DATA E4,37
0123:  DATA 8A,06
0124:  DATA 00,01
0125:  RETLW  54
0126:  RETLW  65
0127:  RETLW  6D
0128:  RETLW  70
0129:  RETLW  6F
012A:  RETLW  20
012B:  RETLW  4C
012C:  RETLW  69
012D:  RETLW  6D
012E:  RETLW  70
012F:  RETLW  65
0130:  RETLW  7A
0131:  RETLW  61
0132:  RETLW  20
0133:  RETLW  45
0134:  RETLW  6E
0135:  RETLW  74
0136:  RETLW  72
0137:  RETLW  61
0138:  RETLW  64
0139:  RETLW  61
013A:  RETLW  20
013B:  RETLW  64
013C:  RETLW  65
013D:  RETLW  20
013E:  RETLW  43
013F:  RETLW  61
0140:  RETLW  6D
0141:  RETLW  69
0142:  RETLW  E3
0143:  RETLW  6F
0144:  RETLW  20
0145:  RETLW  3D
0146:  RETLW  20
0147:  RETLW  25
0148:  RETLW  4C
0149:  RETLW  75
014A:  RETLW  20
014B:  RETLW  0A
014C:  RETLW  0D
014D:  RETLW  00
014E:  RETLW  54
014F:  RETLW  65
0150:  RETLW  6D
0151:  RETLW  70
0152:  RETLW  6F
0153:  RETLW  20
0154:  RETLW  4C
0155:  RETLW  69
0156:  RETLW  6D
0157:  RETLW  70
0158:  RETLW  65
0159:  RETLW  7A
015A:  RETLW  61
015B:  RETLW  20
015C:  RETLW  53
015D:  RETLW  61
015E:  RETLW  ED
015F:  RETLW  64
0160:  RETLW  61
0161:  RETLW  20
0162:  RETLW  64
0163:  RETLW  65
0164:  RETLW  20
0165:  RETLW  43
0166:  RETLW  61
0167:  RETLW  6D
0168:  RETLW  69
0169:  RETLW  E3
016A:  RETLW  6F
016B:  RETLW  20
016C:  RETLW  3D
016D:  RETLW  20
016E:  RETLW  25
016F:  RETLW  4C
0170:  RETLW  75
0171:  RETLW  20
0172:  RETLW  0A
0173:  RETLW  0D
0174:  RETLW  00
0175:  DATA D4,32
0176:  DATA 6D,38
0177:  DATA 6F,10
0178:  DATA D6,32
0179:  DATA 72,32
017A:  DATA 65,10
017B:  DATA CD,30
017C:  DATA F8,34
017D:  DATA ED,37
017E:  DATA A0,22
017F:  DATA 6D,38
0180:  DATA 69,36
0181:  DATA E8,30
0182:  DATA E4,37
0183:  DATA F2,32
0184:  DATA 73,10
0185:  DATA 3D,10
0186:  DATA 25,26
0187:  DATA 75,10
0188:  DATA 8A,06
0189:  DATA 00,00
018A:  DATA D4,32
018B:  DATA 6D,38
018C:  DATA 6F,10
018D:  DATA CC,34
018E:  DATA 6D,38
018F:  DATA 65,3D
0190:  DATA 61,10
0191:  DATA C5,36
0192:  DATA F0,34
0193:  DATA 6C,34
0194:  DATA 61,32
0195:  DATA 6F,39
0196:  DATA E5,39
0197:  DATA A0,23
0198:  DATA 33,10
0199:  DATA 2D,1F
019A:  DATA A0,23
019B:  DATA 32,10
019C:  DATA 3D,10
019D:  DATA 25,26
019E:  DATA 75,10
019F:  DATA 8A,06
01A0:  DATA 00,00
01A1:  DATA 49,37
01A2:  DATA F0,3A
01A3:  DATA 74,10
01A4:  DATA 31,10
01A5:  DATA 2D,1F
01A6:  DATA A0,27
01A7:  DATA 4E,05
01A8:  DATA 0D,00
01A9:  DATA 49,37
01AA:  DATA F0,3A
01AB:  DATA 74,10
01AC:  DATA 31,10
01AD:  DATA 2D,1F
01AE:  DATA A0,27
01AF:  DATA 46,23
01B0:  DATA 8A,06
01B1:  DATA 00,01
01B2:  DATA 49,37
01B3:  DATA F0,3A
01B4:  DATA 74,10
01B5:  DATA B2,16
01B6:  DATA 3E,10
01B7:  DATA 4F,27
01B8:  DATA 8A,06
01B9:  DATA 00,01
01BA:  DATA 49,37
01BB:  DATA F0,3A
01BC:  DATA 74,10
01BD:  DATA B2,16
01BE:  DATA 3E,10
01BF:  DATA 4F,23
01C0:  DATA 46,05
01C1:  DATA 0D,00
01C2:  DATA 49,37
01C3:  DATA F0,3A
01C4:  DATA 74,10
01C5:  DATA B3,16
01C6:  DATA 3E,10
01C7:  DATA 4F,27
01C8:  DATA 8A,06
01C9:  DATA 00,01
01CA:  DATA 49,37
01CB:  DATA F0,3A
01CC:  DATA 74,10
01CD:  DATA B3,16
01CE:  DATA 3E,10
01CF:  DATA 4F,23
01D0:  DATA 46,05
01D1:  DATA 0D,00
01D2:  DATA 49,37
01D3:  DATA F0,3A
01D4:  DATA 74,10
01D5:  DATA B4,16
01D6:  DATA 3E,10
01D7:  DATA 4F,27
01D8:  DATA 8A,06
01D9:  DATA 00,01
01DA:  DATA 49,37
01DB:  DATA F0,3A
01DC:  DATA 74,10
01DD:  DATA B4,16
01DE:  DATA 3E,10
01DF:  DATA 4F,23
01E0:  DATA 46,05
01E1:  DATA 0D,00
01E2:  DATA 2A,15
01E3:  DATA AA,24
01E4:  DATA EE,34
01E5:  DATA E3,34
01E6:  DATA 6F,10
01E7:  DATA E4,32
01E8:  DATA 20,23
01E9:  DATA 75,37
01EA:  DATA E3,34
01EB:  DATA 6F,37
01EC:  DATA E1,36
01ED:  DATA 65,37
01EE:  DATA F4,37
01EF:  DATA 2A,15
01F0:  DATA 2A,05
01F1:  DATA 0D,00
*
0207:  MOVF   0B,W
0208:  BSF    03.5
0209:  MOVWF  47
020A:  BCF    03.5
020B:  BCF    0B.7
020C:  BSF    03.5
020D:  BSF    03.6
020E:  BSF    0C.7
020F:  BSF    0C.0
0210:  NOP
0211:  NOP
0212:  BCF    03.6
0213:  BTFSS  47.7
0214:  GOTO   218
0215:  BCF    03.5
0216:  BSF    0B.7
0217:  BSF    03.5
0218:  BCF    03.5
0219:  BSF    03.6
021A:  MOVF   0C,W
021B:  ANDLW  7F
021C:  BTFSC  03.2
021D:  GOTO   281
021E:  BSF    03.5
021F:  BCF    03.6
0220:  MOVWF  47
0221:  BCF    03.5
0222:  BSF    03.6
0223:  MOVF   0D,W
0224:  BSF    03.5
0225:  BCF    03.6
0226:  MOVWF  48
0227:  BCF    03.5
0228:  BSF    03.6
0229:  MOVF   0F,W
022A:  BSF    03.5
022B:  BCF    03.6
022C:  MOVWF  49
022D:  MOVF   47,W
022E:  CLRWDT
022F:  BCF    03.5
0230:  BTFSC  0C.4
0231:  GOTO   234
0232:  BSF    03.5
0233:  GOTO   22E
0234:  MOVWF  19
0235:  BSF    03.5
0236:  MOVF   48,W
0237:  BCF    03.5
0238:  BSF    03.6
0239:  MOVWF  0D
023A:  BSF    03.5
023B:  BCF    03.6
023C:  MOVF   49,W
023D:  BCF    03.5
023E:  BSF    03.6
023F:  MOVWF  0F
0240:  BCF    03.6
0241:  MOVF   0B,W
0242:  BSF    03.5
0243:  MOVWF  4A
0244:  BCF    03.5
0245:  BCF    0B.7
0246:  BSF    03.5
0247:  BSF    03.6
0248:  BSF    0C.7
0249:  BSF    0C.0
024A:  NOP
024B:  NOP
024C:  BCF    03.6
024D:  BTFSS  4A.7
024E:  GOTO   252
024F:  BCF    03.5
0250:  BSF    0B.7
0251:  BSF    03.5
0252:  BCF    03.5
0253:  BSF    03.6
0254:  RLF    0C,W
0255:  RLF    0E,W
0256:  ANDLW  7F
0257:  BTFSC  03.2
0258:  GOTO   281
0259:  BSF    03.5
025A:  BCF    03.6
025B:  MOVWF  47
025C:  BCF    03.5
025D:  BSF    03.6
025E:  MOVF   0D,W
025F:  BSF    03.5
0260:  BCF    03.6
0261:  MOVWF  48
0262:  BCF    03.5
0263:  BSF    03.6
0264:  MOVF   0F,W
0265:  BSF    03.5
0266:  BCF    03.6
0267:  MOVWF  49
0268:  MOVF   47,W
0269:  CLRWDT
026A:  BCF    03.5
026B:  BTFSC  0C.4
026C:  GOTO   26F
026D:  BSF    03.5
026E:  GOTO   269
026F:  MOVWF  19
0270:  BSF    03.5
0271:  MOVF   48,W
0272:  BCF    03.5
0273:  BSF    03.6
0274:  MOVWF  0D
0275:  BSF    03.5
0276:  BCF    03.6
0277:  MOVF   49,W
0278:  BCF    03.5
0279:  BSF    03.6
027A:  MOVWF  0F
027B:  INCF   0D,F
027C:  BTFSC  03.2
027D:  INCF   0F,F
027E:  BCF    03.6
027F:  GOTO   207
0280:  BSF    03.6
0281:  BCF    03.6
0282:  RETURN
*
02CC:  MOVLW  10
02CD:  BSF    03.5
02CE:  MOVWF  56
02CF:  CLRF   77
02D0:  CLRF   7A
02D1:  RRF    53,F
02D2:  RRF    52,F
02D3:  BTFSS  03.0
02D4:  GOTO   2DB
02D5:  MOVF   54,W
02D6:  ADDWF  77,F
02D7:  BTFSC  03.0
02D8:  INCF   7A,F
02D9:  MOVF   55,W
02DA:  ADDWF  7A,F
02DB:  RRF    7A,F
02DC:  RRF    77,F
02DD:  RRF    79,F
02DE:  RRF    78,F
02DF:  DECFSZ 56,F
02E0:  GOTO   2D1
02E1:  BCF    03.5
02E2:  RETURN
*
046E:  MOVF   0B,W
046F:  BSF    03.5
0470:  MOVWF  48
0471:  BCF    03.5
0472:  BCF    0B.7
0473:  BSF    03.5
0474:  BSF    03.6
0475:  BSF    0C.7
0476:  BSF    0C.0
0477:  NOP
0478:  NOP
0479:  BCF    03.6
047A:  BTFSS  48.7
047B:  GOTO   47F
047C:  BCF    03.5
047D:  BSF    0B.7
047E:  BSF    03.5
047F:  BCF    03.5
0480:  BSF    03.6
0481:  MOVF   0D,W
0482:  BSF    03.5
0483:  BCF    03.6
0484:  MOVWF  48
0485:  BCF    03.5
0486:  BSF    03.6
0487:  MOVF   0F,W
0488:  BSF    03.5
0489:  BCF    03.6
048A:  MOVWF  49
048B:  BCF    03.5
048C:  BSF    03.6
048D:  MOVF   0C,W
048E:  CLRWDT
048F:  BCF    03.6
0490:  BTFSC  0C.4
0491:  GOTO   494
0492:  BSF    03.6
0493:  GOTO   48E
0494:  MOVWF  19
0495:  BSF    03.5
0496:  MOVF   48,W
0497:  BCF    03.5
0498:  BSF    03.6
0499:  MOVWF  0D
049A:  BSF    03.5
049B:  BCF    03.6
049C:  MOVF   49,W
049D:  BCF    03.5
049E:  BSF    03.6
049F:  MOVWF  0F
04A0:  INCF   0D,F
04A1:  BTFSC  03.2
04A2:  INCF   0F,F
04A3:  BSF    03.5
04A4:  BCF    03.6
04A5:  DECFSZ 47,F
04A6:  GOTO   4A8
04A7:  GOTO   4AA
04A8:  BCF    03.5
04A9:  GOTO   46E
04AA:  BCF    03.5
04AB:  RETURN
04AC:  BSF    03.5
04AD:  CLRF   4F
04AE:  MOVF   04,W
04AF:  MOVWF  4E
04B0:  BCF    4F.0
04B1:  BTFSC  03.7
04B2:  BSF    4F.0
04B3:  SWAPF  48,W
04B4:  IORLW  F0
04B5:  MOVWF  4A
04B6:  ADDWF  4A,F
04B7:  ADDLW  E2
04B8:  MOVWF  4B
04B9:  ADDLW  32
04BA:  MOVWF  4D
04BB:  MOVF   48,W
04BC:  ANDLW  0F
04BD:  ADDWF  4B,F
04BE:  ADDWF  4B,F
04BF:  ADDWF  4D,F
04C0:  ADDLW  E9
04C1:  MOVWF  4C
04C2:  ADDWF  4C,F
04C3:  ADDWF  4C,F
04C4:  SWAPF  47,W
04C5:  ANDLW  0F
04C6:  ADDWF  4C,F
04C7:  ADDWF  4D,F
04C8:  RLF    4C,F
04C9:  RLF    4D,F
04CA:  COMF   4D,F
04CB:  RLF    4D,F
04CC:  MOVF   47,W
04CD:  ANDLW  0F
04CE:  ADDWF  4D,F
04CF:  RLF    4A,F
04D0:  MOVLW  07
04D1:  MOVWF  49
04D2:  MOVLW  0A
04D3:  ADDWF  4D,F
04D4:  DECF   4C,F
04D5:  BTFSS  03.0
04D6:  GOTO   4D3
04D7:  ADDWF  4C,F
04D8:  DECF   4B,F
04D9:  BTFSS  03.0
04DA:  GOTO   4D7
04DB:  ADDWF  4B,F
04DC:  DECF   4A,F
04DD:  BTFSS  03.0
04DE:  GOTO   4DB
04DF:  ADDWF  4A,F
04E0:  DECF   49,F
04E1:  BTFSS  03.0
04E2:  GOTO   4DF
04E3:  MOVLW  C9
04E4:  MOVWF  04
04E5:  BCF    03.7
04E6:  MOVLW  07
04E7:  ANDWF  4E,W
04E8:  BCF    4E.6
04E9:  ADDWF  04,F
04EA:  MOVLW  CD
04EB:  SUBWF  04,W
04EC:  BTFSC  03.2
04ED:  BSF    4E.6
04EE:  MOVF   00,W
04EF:  MOVWF  77
04F0:  BTFSS  03.2
04F1:  GOTO   4FA
04F2:  BTFSC  4E.6
04F3:  GOTO   4FA
04F4:  BTFSC  4E.4
04F5:  GOTO   507
04F6:  BTFSC  4E.3
04F7:  GOTO   4FA
04F8:  MOVLW  20
04F9:  GOTO   4FD
04FA:  BSF    4E.3
04FB:  BCF    4E.4
04FC:  MOVLW  30
04FD:  ADDWF  77,F
04FE:  MOVF   77,W
04FF:  CLRWDT
0500:  BCF    03.5
0501:  BTFSC  0C.4
0502:  GOTO   505
0503:  BSF    03.5
0504:  GOTO   4FF
0505:  MOVWF  19
0506:  BSF    03.5
0507:  INCF   04,F
0508:  BTFSS  4E.6
0509:  GOTO   4EA
050A:  BCF    03.5
050B:  RETURN
050C:  MOVF   0B,W
050D:  BSF    03.5
050E:  MOVWF  48
050F:  BCF    03.5
0510:  BCF    0B.7
0511:  BSF    03.5
0512:  BSF    03.6
0513:  BSF    0C.7
0514:  BSF    0C.0
0515:  NOP
0516:  NOP
0517:  BCF    03.6
0518:  BTFSS  48.7
0519:  GOTO   51D
051A:  BCF    03.5
051B:  BSF    0B.7
051C:  BSF    03.5
051D:  BTFSC  03.0
051E:  GOTO   55A
051F:  BCF    03.5
0520:  BSF    03.6
0521:  MOVF   0C,W
0522:  ANDLW  7F
0523:  BSF    03.5
0524:  BCF    03.6
0525:  MOVWF  48
0526:  BCF    03.5
0527:  BSF    03.6
0528:  MOVF   0D,W
0529:  BSF    03.5
052A:  BCF    03.6
052B:  MOVWF  49
052C:  BCF    03.5
052D:  BSF    03.6
052E:  MOVF   0F,W
052F:  BSF    03.5
0530:  BCF    03.6
0531:  MOVWF  4A
0532:  MOVF   48,W
0533:  CLRWDT
0534:  BCF    03.5
0535:  BTFSC  0C.4
0536:  GOTO   539
0537:  BSF    03.5
0538:  GOTO   533
0539:  MOVWF  19
053A:  BSF    03.5
053B:  MOVF   49,W
053C:  BCF    03.5
053D:  BSF    03.6
053E:  MOVWF  0D
053F:  BSF    03.5
0540:  BCF    03.6
0541:  MOVF   4A,W
0542:  BCF    03.5
0543:  BSF    03.6
0544:  MOVWF  0F
0545:  BCF    03.6
0546:  MOVF   0B,W
0547:  BSF    03.5
0548:  MOVWF  4B
0549:  BCF    03.5
054A:  BCF    0B.7
054B:  BSF    03.5
054C:  BSF    03.6
054D:  BSF    0C.7
054E:  BSF    0C.0
054F:  NOP
0550:  NOP
0551:  BCF    03.6
0552:  BTFSS  4B.7
0553:  GOTO   557
0554:  BCF    03.5
0555:  BSF    0B.7
0556:  BSF    03.5
0557:  DECFSZ 47,F
0558:  GOTO   55A
0559:  GOTO   58C
055A:  BCF    03.5
055B:  BSF    03.6
055C:  RLF    0C,W
055D:  RLF    0E,W
055E:  ANDLW  7F
055F:  BSF    03.5
0560:  BCF    03.6
0561:  MOVWF  48
0562:  BCF    03.5
0563:  BSF    03.6
0564:  MOVF   0D,W
0565:  BSF    03.5
0566:  BCF    03.6
0567:  MOVWF  49
0568:  BCF    03.5
0569:  BSF    03.6
056A:  MOVF   0F,W
056B:  BSF    03.5
056C:  BCF    03.6
056D:  MOVWF  4A
056E:  MOVF   48,W
056F:  CLRWDT
0570:  BCF    03.5
0571:  BTFSC  0C.4
0572:  GOTO   575
0573:  BSF    03.5
0574:  GOTO   56F
0575:  MOVWF  19
0576:  BSF    03.5
0577:  MOVF   49,W
0578:  BCF    03.5
0579:  BSF    03.6
057A:  MOVWF  0D
057B:  BSF    03.5
057C:  BCF    03.6
057D:  MOVF   4A,W
057E:  BCF    03.5
057F:  BSF    03.6
0580:  MOVWF  0F
0581:  INCF   0D,F
0582:  BTFSC  03.2
0583:  INCF   0F,F
0584:  BCF    03.0
0585:  BSF    03.5
0586:  BCF    03.6
0587:  DECFSZ 47,F
0588:  GOTO   58A
0589:  GOTO   58C
058A:  BCF    03.5
058B:  GOTO   50C
058C:  BCF    03.5
058D:  RETURN
*
0B35:  BSF    0A.0
0B36:  BSF    0A.1
0B37:  BCF    0A.2
0B38:  ADDWF  02,F
0B39:  GOTO   155
0B3A:  GOTO   176
0B3B:  GOTO   1AE
0B3C:  GOTO   1CD
0B3D:  GOTO   1EF
0B3E:  GOTO   218
0B3F:  GOTO   221
0B40:  BSF    0A.0
0B41:  BSF    0A.1
0B42:  BCF    0A.2
0B43:  ADDWF  02,F
0B44:  GOTO   243
0B45:  GOTO   264
0B46:  GOTO   29D
0B47:  GOTO   2BC
0B48:  GOTO   2DE
0B49:  GOTO   316
....................  
.................... #list 
....................  
.................... #fuses HS,WDT,PROTECT,NOLVP,NODEBUG,NOMCLR,NOBROWNOUT 
.................... #use delay(clock=10000000)   
*
01F2:  MOVLW  D2
01F3:  MOVWF  04
01F4:  BCF    03.7
01F5:  MOVF   00,W
01F6:  BTFSC  03.2
01F7:  GOTO   206
01F8:  MOVLW  03
01F9:  MOVWF  78
01FA:  CLRF   77
01FB:  DECFSZ 77,F
01FC:  GOTO   1FB
01FD:  DECFSZ 78,F
01FE:  GOTO   1FA
01FF:  MOVLW  3C
0200:  MOVWF  77
0201:  DECFSZ 77,F
0202:  GOTO   201
0203:  GOTO   204
0204:  DECFSZ 00,F
0205:  GOTO   1F8
0206:  RETURN
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
....................  
.................... //1er endereço MSB, segundo LSB 
....................  
....................  
.................... #use RS232(baud=9600,xmit=PIN_C6,rcv=PIN_C7,parity=N,errors,stream=PORTA,RESTART_WDT) 
*
005B:  CLRWDT
005C:  BTFSS  0C.5
005D:  GOTO   05B
005E:  MOVF   18,W
005F:  MOVWF  2C
0060:  MOVF   1A,W
0061:  MOVWF  78
0062:  BTFSS  2C.1
0063:  GOTO   066
0064:  BCF    18.4
0065:  BSF    18.4
.................... //#rom int8 0x2100={1,2,0,5,5,10,0,0,0,0,0} 
.................... //Defines s 
....................  
.................... #define IN1    PIN_C5      //IN1 -> Espira E1    
.................... #define IN2    PIN_C4      //IN2 -> Espira E2  
.................... #define IN3    PIN_C3      //IN3 -> Botoneira Chamada Açucar     
.................... #define IN4    PIN_C2      //IN4 -> Sinal Rádio 
.................... #define IN5    PIN_C1      //IN5 ->  
.................... #define IN6    PIN_C0      //IN6 ->    
.................... // PIN_A4 -> OUT 9 C3 
....................  
....................  
.................... int8 data_receive=0; 
....................  
.................... Unsigned int8 Data_Buffer[9];    // 
.................... int8 current_data=0; 
.................... int1 BufferOK=0; 
.................... int1 Carriage_Return=1; 
.................... int8 count_TimerA=0,count_TimerB=0; 
.................... int8  TIMER_LC=180;                  //Timer Linha Comandos 60segundos 
.................... int16 TIMER_A=0; 
.................... int16 TIMER_B=0;                     //Timer limpeza G2 -> G1  
.................... int16 TIMER_C=0;                     //Timer limpeza G2 -> G1  
....................  
.................... int16 TimerI1on=0,TimerI1off=0;    //Timer 5ms 
.................... int16 TimerI2on=0,TimerI2off=0;    //Timer 5ms 
.................... int16 TimerI3on=0,TimerI3off=0;    //Timer 5ms 
.................... int16 TimerI4on=0,TimerI4off=0;    //Timer 5ms 
....................  
.................... int8 auxI1on=0,auxI1off=0; 
.................... int8 auxI2on=0,auxI2off=0; 
.................... int8 auxI3on=0,auxI3off=0; 
.................... int8 auxI4on=0,auxI4off=0; 
....................  
....................  
.................... int1 ING_I1=0,ING_I2=0,ING_I3=0,ING_I4=0; 
.................... int1 MEM_I1=0,MEM_I2=0,MEM_I3=0,MEM_I4=0; 
.................... int1 SIGNAL_BLINK=0; 
....................  
.................... int16 Tempos[15]; 
....................  
.................... int8 EstadoG1=0; 
.................... int8 EstadoG2=0; 
.................... int8 EstadoG3=0; 
.................... int8 EstadoG4=0; 
....................  
.................... int8 saida=0x00;               
.................... int1 LinhaComando=0;        //0-> OFF, modo rádio activo, 1-> ON com linha de comandos 
....................  
.................... int16 TimeOut=255; 
.................... int16 TimeOutTimer=255; 
.................... Unsigned int8 StartByte='#'; 
....................  
.................... int8 stepR1=0,stepR2=0; 
.................... int8 auxTimeR1=0,auxTimeR2=0; 
....................  
.................... int1 debugInputs=0; 
....................  
.................... int1 ChamadaAcucar=0; 
.................... int1 LimpezaAcucar=0; 
....................  
.................... #INT_RDA 
.................... void trata_INT_RDA() 
.................... { 
....................   //output_toggle(PIN_B7); 
....................   //output_toggle(PIN_A4); 
....................   data_receive=fgetc(PORTA); 
0066:  MOVF   78,W
0067:  MOVWF  2D
....................   if(data_receive==StartByte && Carriage_Return)          // 
0068:  MOVF   64,W
0069:  SUBWF  2D,W
006A:  BTFSS  03.2
006B:  GOTO   079
006C:  BTFSS  38.1
006D:  GOTO   079
....................     { 
....................      //TimeOut=0; 
....................      //count_TimerA=0; 
....................      current_data=0; 
006E:  CLRF   37
....................      Data_Buffer[current_data]=data_receive; 
006F:  MOVLW  2E
0070:  ADDWF  37,W
0071:  MOVWF  04
0072:  BCF    03.7
0073:  MOVF   2D,W
0074:  MOVWF  00
....................      current_data++; 
0075:  INCF   37,F
....................      Carriage_Return=0; 
0076:  BCF    38.1
....................      BufferOK=0;  
0077:  BCF    38.0
....................     } 
0078:  GOTO   098
....................   else   
....................     { 
....................      if(!Carriage_Return) 
0079:  BTFSC  38.1
007A:  GOTO   098
....................        {  
....................       if(current_data==8 || data_receive==13)           //  || Timeout 
007B:  MOVF   37,W
007C:  SUBLW  08
007D:  BTFSC  03.2
007E:  GOTO   083
007F:  MOVF   2D,W
0080:  SUBLW  0D
0081:  BTFSS  03.2
0082:  GOTO   091
....................         {Data_Buffer[current_data]=data_receive; 
0083:  MOVLW  2E
0084:  ADDWF  37,W
0085:  MOVWF  04
0086:  BCF    03.7
0087:  MOVF   2D,W
0088:  MOVWF  00
....................          Carriage_Return=1; 
0089:  BSF    38.1
....................          current_data=0; 
008A:  CLRF   37
....................          bufferOK=1; 
008B:  BSF    38.0
....................          if(data_receive!=13)     //erro 
008C:  MOVF   2D,W
008D:  SUBLW  0D
008E:  BTFSS  03.2
....................             bufferOK=0;  
008F:  BCF    38.0
....................         } 
0090:  GOTO   098
....................       else 
....................         {Data_Buffer[current_data]=data_receive; 
0091:  MOVLW  2E
0092:  ADDWF  37,W
0093:  MOVWF  04
0094:  BCF    03.7
0095:  MOVF   2D,W
0096:  MOVWF  00
....................         current_data++;          
0097:  INCF   37,F
....................         } 
....................     } 
....................    }   
.................... } 
....................  
....................  
....................  
0098:  BCF    0C.5
0099:  BCF    0A.3
009A:  GOTO   036
.................... #INT_TIMER1 
.................... void trata_t1()         //Passa cá a cada 50ms 
.................... { 
.................... count_TimerA++; 
009B:  INCF   39,F
.................... count_TimerB++; 
009C:  INCF   3A,F
....................  
.................... TimerI1on++;    //Timer 5ms 
009D:  INCF   42,F
009E:  BTFSC  03.2
009F:  INCF   43,F
.................... TimerI1off++;   //Timer 5ms 
00A0:  INCF   44,F
00A1:  BTFSC  03.2
00A2:  INCF   45,F
.................... TimerI2on++;    //Timer 5ms 
00A3:  INCF   46,F
00A4:  BTFSC  03.2
00A5:  INCF   47,F
.................... TimerI2off++;   //Timer 5ms 
00A6:  INCF   48,F
00A7:  BTFSC  03.2
00A8:  INCF   49,F
.................... TimerI3on++;    //Timer 5ms 
00A9:  INCF   4A,F
00AA:  BTFSC  03.2
00AB:  INCF   4B,F
.................... TimerI3off++;   //Timer 5ms 
00AC:  INCF   4C,F
00AD:  BTFSC  03.2
00AE:  INCF   4D,F
.................... TimerI4on++;    //Timer 5ms 
00AF:  INCF   4E,F
00B0:  BTFSC  03.2
00B1:  INCF   4F,F
.................... TimerI4off++;   //Timer 5ms 
00B2:  INCF   50,F
00B3:  BTFSC  03.2
00B4:  INCF   51,F
....................  
.................... RESTART_WDT(); 
00B5:  CLRWDT
.................... if(count_timerA<=10)  //0,5seg 
00B6:  MOVF   39,W
00B7:  SUBLW  0A
00B8:  BTFSS  03.0
00B9:  GOTO   0BC
....................    SIGNAL_BLINK=1; 
00BA:  BSF    5A.2
00BB:  GOTO   0DB
.................... else 
....................   { 
....................    SIGNAL_BLINK=0; 
00BC:  BCF    5A.2
....................    if(count_timerA>=10)   //1 segundo 
00BD:  MOVF   39,W
00BE:  SUBLW  09
00BF:  BTFSC  03.0
00C0:  GOTO   0CC
....................      { 
....................       count_timerA=0; 
00C1:  CLRF   39
....................       if(TIMER_A<255) 
00C2:  MOVF   3D,F
00C3:  BTFSS  03.2
00C4:  GOTO   0CC
00C5:  MOVF   3C,W
00C6:  SUBLW  FE
00C7:  BTFSS  03.0
00C8:  GOTO   0CC
....................          TIMER_A++; 
00C9:  INCF   3C,F
00CA:  BTFSC  03.2
00CB:  INCF   3D,F
....................      } 
....................    if(count_timerB>=10)   //1 segundo 
00CC:  MOVF   3A,W
00CD:  SUBLW  09
00CE:  BTFSC  03.0
00CF:  GOTO   0DB
....................      { 
....................       count_timerB=0; 
00D0:  CLRF   3A
....................       if(TIMER_B<255) 
00D1:  MOVF   3F,F
00D2:  BTFSS  03.2
00D3:  GOTO   0DB
00D4:  MOVF   3E,W
00D5:  SUBLW  FE
00D6:  BTFSS  03.0
00D7:  GOTO   0DB
....................          TIMER_B++; 
00D8:  INCF   3E,F
00D9:  BTFSC  03.2
00DA:  INCF   3F,F
....................      } 
....................        
....................   } 
....................   
.................... set_timer1(3036); 
00DB:  CLRF   0E
00DC:  MOVLW  0B
00DD:  MOVWF  0F
00DE:  MOVLW  DC
00DF:  MOVWF  0E
.................... //SET_TIMER1(34286); 
00E0:  BCF    0C.0
00E1:  BCF    0A.3
00E2:  GOTO   036
.................... } 
....................  
....................  
....................  
.................... void ImprimeMSGRS232(int1 msg) //0:Erro, 1:OK 
.................... { 
....................  
.................... if(!msg) 
*
02E3:  BSF    03.5
02E4:  MOVF   52,F
02E5:  BTFSS  03.2
02E6:  GOTO   300
....................   {fputc('e',PORTA); //ERRO 
02E7:  MOVLW  65
02E8:  CLRWDT
02E9:  BCF    03.5
02EA:  BTFSC  0C.4
02EB:  GOTO   2EE
02EC:  BSF    03.5
02ED:  GOTO   2E8
02EE:  MOVWF  19
....................    fputc('r',PORTA); // 
02EF:  MOVLW  72
02F0:  CLRWDT
02F1:  BTFSS  0C.4
02F2:  GOTO   2F0
02F3:  MOVWF  19
....................    fputc('r',PORTA); // 
02F4:  MOVLW  72
02F5:  CLRWDT
02F6:  BTFSS  0C.4
02F7:  GOTO   2F5
02F8:  MOVWF  19
....................    fputc('o',PORTA); // 
02F9:  MOVLW  6F
02FA:  CLRWDT
02FB:  BTFSS  0C.4
02FC:  GOTO   2FA
02FD:  MOVWF  19
....................   } 
02FE:  GOTO   30D
02FF:  BSF    03.5
.................... else 
....................   { 
....................   fputc('o',PORTA);  
0300:  MOVLW  6F
0301:  CLRWDT
0302:  BCF    03.5
0303:  BTFSC  0C.4
0304:  GOTO   307
0305:  BSF    03.5
0306:  GOTO   301
0307:  MOVWF  19
....................   fputc('k',PORTA); 
0308:  MOVLW  6B
0309:  CLRWDT
030A:  BTFSS  0C.4
030B:  GOTO   309
030C:  MOVWF  19
....................   } 
.................... fputc(13,PORTA); 
030D:  MOVLW  0D
030E:  CLRWDT
030F:  BTFSS  0C.4
0310:  GOTO   30E
0311:  MOVWF  19
.................... fputc(10,PORTA); 
0312:  MOVLW  0A
0313:  CLRWDT
0314:  BTFSS  0C.4
0315:  GOTO   313
0316:  MOVWF  19
0317:  RETURN
.................... } 
....................  
....................  
....................  
.................... void trata_msgAtoI(int8 i_ee,int8 i_temp,int16 max)   //máx 199 
0318:  BSF    03.5
0319:  CLRF   4C
031A:  CLRF   4B
031B:  CLRF   4E
031C:  CLRF   4D
031D:  CLRF   50
031E:  CLRF   4F
031F:  BCF    51.0
.................... { 
.................... int16 aux=0; 
.................... int16 MSB=0,LSB=0; 
.................... int1 valid_data=0; 
....................  
.................... if((Data_Buffer[2]>='0' && Data_Buffer[2]<='9') && (Data_Buffer[3]>='0' && Data_Buffer[3]<='9') && (Data_Buffer[4]>='0' && Data_Buffer[4]<='9') && (Data_Buffer[5]==13))   //são 3 digitos 
0320:  BCF    03.5
0321:  MOVF   30,W
0322:  SUBLW  2F
0323:  BTFSC  03.0
0324:  GOTO   396
0325:  MOVF   30,W
0326:  SUBLW  39
0327:  BTFSS  03.0
0328:  GOTO   396
0329:  MOVF   31,W
032A:  SUBLW  2F
032B:  BTFSC  03.0
032C:  GOTO   396
032D:  MOVF   31,W
032E:  SUBLW  39
032F:  BTFSS  03.0
0330:  GOTO   396
0331:  MOVF   32,W
0332:  SUBLW  2F
0333:  BTFSC  03.0
0334:  GOTO   396
0335:  MOVF   32,W
0336:  SUBLW  39
0337:  BTFSS  03.0
0338:  GOTO   396
0339:  MOVF   33,W
033A:  SUBLW  0D
033B:  BTFSS  03.2
033C:  GOTO   396
....................   { 
....................    MSB=(int16) Data_Buffer[2]-48; 
033D:  BSF    03.5
033E:  CLRF   53
033F:  BCF    03.5
0340:  MOVF   30,W
0341:  BSF    03.5
0342:  MOVWF  52
0343:  MOVLW  30
0344:  SUBWF  52,W
0345:  MOVWF  4D
0346:  MOVF   53,W
0347:  MOVWF  4E
0348:  MOVLW  00
0349:  BTFSS  03.0
034A:  MOVLW  01
034B:  SUBWF  4E,F
....................    MSB=MSB*100; 
034C:  MOVF   4E,W
034D:  MOVWF  53
034E:  MOVF   4D,W
034F:  MOVWF  52
0350:  CLRF   55
0351:  MOVLW  64
0352:  MOVWF  54
0353:  BCF    03.5
0354:  CALL   2CC
0355:  MOVF   79,W
0356:  BSF    03.5
0357:  MOVWF  4E
0358:  MOVF   78,W
0359:  MOVWF  4D
....................    LSB=(int16) Data_Buffer[3]-48; 
035A:  CLRF   53
035B:  BCF    03.5
035C:  MOVF   31,W
035D:  BSF    03.5
035E:  MOVWF  52
035F:  MOVLW  30
0360:  SUBWF  52,W
0361:  MOVWF  4F
0362:  MOVF   53,W
0363:  MOVWF  50
0364:  MOVLW  00
0365:  BTFSS  03.0
0366:  MOVLW  01
0367:  SUBWF  50,F
....................    LSB=LSB*10; 
0368:  MOVF   50,W
0369:  MOVWF  53
036A:  MOVF   4F,W
036B:  MOVWF  52
036C:  CLRF   55
036D:  MOVLW  0A
036E:  MOVWF  54
036F:  BCF    03.5
0370:  CALL   2CC
0371:  MOVF   79,W
0372:  BSF    03.5
0373:  MOVWF  50
0374:  MOVF   78,W
0375:  MOVWF  4F
....................    MSB=MSB+LSB; 
0376:  MOVF   4F,W
0377:  ADDWF  4D,F
0378:  MOVF   50,W
0379:  BTFSC  03.0
037A:  INCFSZ 50,W
037B:  ADDWF  4E,F
....................    LSB=(int16) Data_Buffer[4]-48; 
037C:  CLRF   53
037D:  BCF    03.5
037E:  MOVF   32,W
037F:  BSF    03.5
0380:  MOVWF  52
0381:  MOVLW  30
0382:  SUBWF  52,W
0383:  MOVWF  4F
0384:  MOVF   53,W
0385:  MOVWF  50
0386:  MOVLW  00
0387:  BTFSS  03.0
0388:  MOVLW  01
0389:  SUBWF  50,F
....................    aux=MSB+LSB; 
038A:  MOVF   4F,W
038B:  ADDWF  4D,W
038C:  MOVWF  4B
038D:  MOVF   4E,W
038E:  MOVWF  4C
038F:  MOVF   50,W
0390:  BTFSC  03.0
0391:  INCFSZ 50,W
0392:  ADDWF  4C,F
....................    valid_data=1; 
0393:  BSF    51.0
....................   } 
0394:  GOTO   401
0395:  BCF    03.5
.................... else 
....................    if((Data_Buffer[2]>='0' && Data_Buffer[2]<='9') && (Data_Buffer[3]>='0' && Data_Buffer[3]<='9') && (Data_Buffer[4]==13))   //são dois digitos 
0396:  MOVF   30,W
0397:  SUBLW  2F
0398:  BTFSC  03.0
0399:  GOTO   3E1
039A:  MOVF   30,W
039B:  SUBLW  39
039C:  BTFSS  03.0
039D:  GOTO   3E1
039E:  MOVF   31,W
039F:  SUBLW  2F
03A0:  BTFSC  03.0
03A1:  GOTO   3E1
03A2:  MOVF   31,W
03A3:  SUBLW  39
03A4:  BTFSS  03.0
03A5:  GOTO   3E1
03A6:  MOVF   32,W
03A7:  SUBLW  0D
03A8:  BTFSS  03.2
03A9:  GOTO   3E1
....................      { 
....................       MSB=(int16) Data_Buffer[2]-48; 
03AA:  BSF    03.5
03AB:  CLRF   53
03AC:  BCF    03.5
03AD:  MOVF   30,W
03AE:  BSF    03.5
03AF:  MOVWF  52
03B0:  MOVLW  30
03B1:  SUBWF  52,W
03B2:  MOVWF  4D
03B3:  MOVF   53,W
03B4:  MOVWF  4E
03B5:  MOVLW  00
03B6:  BTFSS  03.0
03B7:  MOVLW  01
03B8:  SUBWF  4E,F
....................       MSB=MSB*10; 
03B9:  MOVF   4E,W
03BA:  MOVWF  53
03BB:  MOVF   4D,W
03BC:  MOVWF  52
03BD:  CLRF   55
03BE:  MOVLW  0A
03BF:  MOVWF  54
03C0:  BCF    03.5
03C1:  CALL   2CC
03C2:  MOVF   79,W
03C3:  BSF    03.5
03C4:  MOVWF  4E
03C5:  MOVF   78,W
03C6:  MOVWF  4D
....................       LSB=(int16) Data_Buffer[3]-48; 
03C7:  CLRF   53
03C8:  BCF    03.5
03C9:  MOVF   31,W
03CA:  BSF    03.5
03CB:  MOVWF  52
03CC:  MOVLW  30
03CD:  SUBWF  52,W
03CE:  MOVWF  4F
03CF:  MOVF   53,W
03D0:  MOVWF  50
03D1:  MOVLW  00
03D2:  BTFSS  03.0
03D3:  MOVLW  01
03D4:  SUBWF  50,F
....................       aux=MSB+LSB; 
03D5:  MOVF   4F,W
03D6:  ADDWF  4D,W
03D7:  MOVWF  4B
03D8:  MOVF   4E,W
03D9:  MOVWF  4C
03DA:  MOVF   50,W
03DB:  BTFSC  03.0
03DC:  INCFSZ 50,W
03DD:  ADDWF  4C,F
....................       valid_data=1; 
03DE:  BSF    51.0
....................      } 
03DF:  GOTO   401
03E0:  BCF    03.5
....................    else 
....................       if((Data_Buffer[2]>='0' && Data_Buffer[2]<='9') && (Data_Buffer[3]==13))   //é 1 dígito 
03E1:  MOVF   30,W
03E2:  SUBLW  2F
03E3:  BTFSC  03.0
03E4:  GOTO   402
03E5:  MOVF   30,W
03E6:  SUBLW  39
03E7:  BTFSS  03.0
03E8:  GOTO   402
03E9:  MOVF   31,W
03EA:  SUBLW  0D
03EB:  BTFSS  03.2
03EC:  GOTO   402
....................         { 
....................          LSB=(int16) Data_Buffer[2]-48; 
03ED:  BSF    03.5
03EE:  CLRF   53
03EF:  BCF    03.5
03F0:  MOVF   30,W
03F1:  BSF    03.5
03F2:  MOVWF  52
03F3:  MOVLW  30
03F4:  SUBWF  52,W
03F5:  MOVWF  4F
03F6:  MOVF   53,W
03F7:  MOVWF  50
03F8:  MOVLW  00
03F9:  BTFSS  03.0
03FA:  MOVLW  01
03FB:  SUBWF  50,F
....................          aux=LSB; 
03FC:  MOVF   50,W
03FD:  MOVWF  4C
03FE:  MOVF   4F,W
03FF:  MOVWF  4B
....................          valid_data=1; 
0400:  BSF    51.0
0401:  BCF    03.5
....................         } 
....................  
....................  
.................... if(valid_data && aux<=max) 
0402:  BSF    03.5
0403:  BTFSS  51.0
0404:  GOTO   46A
0405:  MOVF   4C,W
0406:  SUBWF  4A,W
0407:  BTFSS  03.0
0408:  GOTO   46A
0409:  BTFSS  03.2
040A:  GOTO   40F
040B:  MOVF   4B,W
040C:  SUBWF  49,W
040D:  BTFSS  03.0
040E:  GOTO   46A
.................... { 
....................   Tempos[i_temp]=aux; 
040F:  BCF    03.0
0410:  RLF    48,W
0411:  ADDLW  A0
0412:  MOVWF  04
0413:  BCF    03.7
0414:  INCF   04,F
0415:  MOVF   4C,W
0416:  MOVWF  00
0417:  DECF   04,F
0418:  MOVF   4B,W
0419:  MOVWF  00
....................   write_eeprom (i_ee,make8(aux,1));         // Escreve o MSB de 16bits 
041A:  MOVF   4C,W
041B:  MOVWF  52
041C:  BCF    03.5
041D:  MOVF   0B,W
041E:  MOVWF  77
041F:  BCF    0B.7
0420:  BSF    03.5
0421:  MOVF   47,W
0422:  BCF    03.5
0423:  BSF    03.6
0424:  MOVWF  0D
0425:  BSF    03.5
0426:  BCF    03.6
0427:  MOVF   4C,W
0428:  BCF    03.5
0429:  BSF    03.6
042A:  MOVWF  0C
042B:  BSF    03.5
042C:  BCF    0C.7
042D:  BSF    0C.2
042E:  MOVLW  55
042F:  MOVWF  0D
0430:  MOVLW  AA
0431:  MOVWF  0D
0432:  BSF    0C.1
0433:  BTFSC  0C.1
0434:  GOTO   433
0435:  BCF    0C.2
0436:  MOVF   77,W
0437:  BCF    03.5
0438:  BCF    03.6
0439:  IORWF  0B,F
....................   delay_ms(10); 
043A:  MOVLW  0A
043B:  BSF    03.5
043C:  MOVWF  52
043D:  BCF    03.5
043E:  CALL   1F2
....................   write_eeprom (i_ee+1,make8(aux,0));       // Escreve o LSB de 16bits       
043F:  MOVLW  01
0440:  BSF    03.5
0441:  ADDWF  47,W
0442:  MOVWF  52
0443:  MOVF   4B,W
0444:  MOVWF  53
0445:  BCF    03.5
0446:  MOVF   0B,W
0447:  MOVWF  77
0448:  BCF    0B.7
0449:  BSF    03.5
044A:  MOVF   52,W
044B:  BCF    03.5
044C:  BSF    03.6
044D:  MOVWF  0D
044E:  BSF    03.5
044F:  BCF    03.6
0450:  MOVF   4B,W
0451:  BCF    03.5
0452:  BSF    03.6
0453:  MOVWF  0C
0454:  BSF    03.5
0455:  BCF    0C.7
0456:  BSF    0C.2
0457:  MOVLW  55
0458:  MOVWF  0D
0459:  MOVLW  AA
045A:  MOVWF  0D
045B:  BSF    0C.1
045C:  BTFSC  0C.1
045D:  GOTO   45C
045E:  BCF    0C.2
045F:  MOVF   77,W
0460:  BCF    03.5
0461:  BCF    03.6
0462:  IORWF  0B,F
....................   ImprimeMSGRS232(1);          //OK 
0463:  MOVLW  01
0464:  BSF    03.5
0465:  MOVWF  52
0466:  BCF    03.5
0467:  CALL   2E3
.................... } 
0468:  GOTO   46D
0469:  BSF    03.5
.................... else 
....................   ImprimeMSGRS232(0);          //ERRO 
046A:  CLRF   52
046B:  BCF    03.5
046C:  CALL   2E3
046D:  RETURN
....................  
....................  
....................  
.................... } 
....................  
....................  
....................  
....................  
.................... void trata_buffer(){ 
*
058E:  BSF    03.5
058F:  CLRF   42
0590:  CLRF   43
0591:  MOVLW  30
0592:  MOVWF  44
0593:  CLRF   46
0594:  CLRF   45
.................... int8 i=0,kx=0; 
.................... char ch='0'; 
.................... int16 data_example=0; 
.................... //delay_ms(10); 
....................  
.................... switch(Data_Buffer[1]){ 
0595:  BCF    03.5
0596:  MOVF   2F,W
0597:  XORLW  23
0598:  BTFSC  03.2
0599:  GOTO   5B3
059A:  XORLW  62
059B:  BTFSC  03.2
059C:  GOTO   5D0
059D:  XORLW  03
059E:  BTFSC  03.2
059F:  GOTO   5DC
05A0:  XORLW  01
05A1:  BTFSC  03.2
05A2:  GOTO   5E8
05A3:  XORLW  07
05A4:  BTFSC  03.2
05A5:  GOTO   5F4
05A6:  XORLW  01
05A7:  BTFSC  03.2
05A8:  GOTO   600
05A9:  XORLW  1F
05AA:  BTFSC  03.2
05AB:  GOTO   60E
05AC:  XORLW  08
05AD:  BTFSC  03.2
05AE:  GOTO   624
05AF:  XORLW  01
05B0:  BTFSC  03.2
05B1:  GOTO   640
05B2:  GOTO   6DD
....................       case '#':if(Data_Buffer[2]=='#' && Data_Buffer[3]==13) 
05B3:  MOVF   30,W
05B4:  SUBLW  23
05B5:  BTFSS  03.2
05B6:  GOTO   5CF
05B7:  MOVF   31,W
05B8:  SUBLW  0D
05B9:  BTFSS  03.2
05BA:  GOTO   5CF
....................                  { 
....................                   if(!LinhaComando) 
05BB:  BTFSC  5A.3
05BC:  GOTO   5C7
....................                     {LinhaComando=1; 
05BD:  BSF    5A.3
....................                      fprintf(PORTA,"Modo Linha de Comandos Activado\n\r"); 
05BE:  MOVLW  E3
05BF:  BSF    03.6
05C0:  MOVWF  0D
05C1:  MOVLW  00
05C2:  MOVWF  0F
05C3:  BCF    03.6
05C4:  CALL   207
....................                      TIMER_LC=0; 
05C5:  CLRF   3B
....................                       
....................                     } 
05C6:  GOTO   5CF
....................                   else 
....................                     { 
....................                      LinhaComando=0; 
05C7:  BCF    5A.3
....................                      fprintf(PORTA,"Modo Linha de Comandos Desactivado\n\r"); 
05C8:  MOVLW  F4
05C9:  BSF    03.6
05CA:  MOVWF  0D
05CB:  MOVLW  00
05CC:  MOVWF  0F
05CD:  BCF    03.6
05CE:  CALL   207
....................                     }             
....................                  } 
....................                break;     
05CF:  GOTO   6DD
....................      
....................       case 'A':if(LinhaComando) 
05D0:  BTFSS  5A.3
05D1:  GOTO   5DB
....................                   trata_msgAtoI(0,3,100);       //TLimpeza Entrada de Camião -> Tempos[3]                    
05D2:  BSF    03.5
05D3:  CLRF   47
05D4:  MOVLW  03
05D5:  MOVWF  48
05D6:  CLRF   4A
05D7:  MOVLW  64
05D8:  MOVWF  49
05D9:  BCF    03.5
05DA:  CALL   318
....................                break; 
05DB:  GOTO   6DD
....................        
....................       case 'B':if(LinhaComando) 
05DC:  BTFSS  5A.3
05DD:  GOTO   5E8
....................                   trata_msgAtoI(2,7,100);      //TLimpeza Saída de Camião -> Tempos[7] 
05DE:  MOVLW  02
05DF:  BSF    03.5
05E0:  MOVWF  47
05E1:  MOVLW  07
05E2:  MOVWF  48
05E3:  CLRF   4A
05E4:  MOVLW  64
05E5:  MOVWF  49
05E6:  BCF    03.5
05E7:  CALL   318
....................        
....................       case 'C':if(LinhaComando) 
05E8:  BTFSS  5A.3
05E9:  GOTO   5F4
....................                   trata_msgAtoI(4,8,100);      //Tempo Verde Mínimo Empilhadores G3-G2 -> Tempos[8]           
05EA:  MOVLW  04
05EB:  BSF    03.5
05EC:  MOVWF  47
05ED:  MOVLW  08
05EE:  MOVWF  48
05EF:  CLRF   4A
05F0:  MOVLW  64
05F1:  MOVWF  49
05F2:  BCF    03.5
05F3:  CALL   318
....................        
....................       case 'D':if(LinhaComando) 
05F4:  BTFSS  5A.3
05F5:  GOTO   600
....................                   trata_msgAtoI(6,12,100);    //Tempo Mínimo Empilhadores G2-G3 -> Tempos[12]   
05F6:  MOVLW  06
05F7:  BSF    03.5
05F8:  MOVWF  47
05F9:  MOVLW  0C
05FA:  MOVWF  48
05FB:  CLRF   4A
05FC:  MOVLW  64
05FD:  MOVWF  49
05FE:  BCF    03.5
05FF:  CALL   318
....................                    
....................       case 'E':if(LinhaComando) 
0600:  BTFSS  5A.3
0601:  GOTO   60C
....................                   trata_msgAtoI(8,11,100);    //TLimpeza Empilhadores  Tempos[11]                  
0602:  MOVLW  08
0603:  BSF    03.5
0604:  MOVWF  47
0605:  MOVLW  0B
0606:  MOVWF  48
0607:  CLRF   4A
0608:  MOVLW  64
0609:  MOVWF  49
060A:  BCF    03.5
060B:  CALL   318
....................                break; 
060C:  GOTO   6DD
....................              
....................                break; 
060D:  GOTO   6DD
....................       case 'Z':if(LinhaComando) 
060E:  BTFSS  5A.3
060F:  GOTO   623
....................                  if(!debugInputs) 
0610:  BTFSC  5A.4
0611:  GOTO   61B
....................                     { 
....................                      debugInputs=1; 
0612:  BSF    5A.4
....................                      fprintf(PORTA,"Modo Debug Inputs Ativado\n\r");                     
0613:  MOVLW  07
0614:  BSF    03.6
0615:  MOVWF  0D
0616:  MOVLW  01
0617:  MOVWF  0F
0618:  BCF    03.6
0619:  CALL   207
....................                     } 
061A:  GOTO   623
....................                   else 
....................                     { 
....................                      debugInputs=0; 
061B:  BCF    5A.4
....................                      fprintf(PORTA,"Modo Debug Inputs Desativado\n\r"); 
061C:  MOVLW  15
061D:  BSF    03.6
061E:  MOVWF  0D
061F:  MOVLW  01
0620:  MOVWF  0F
0621:  BCF    03.6
0622:  CALL   207
....................                     }       
....................                break; 
0623:  GOTO   6DD
....................       case 'R':if(LinhaComando) 
0624:  BTFSS  5A.3
0625:  GOTO   63F
....................                  if(Data_Buffer[2]=='S' && Data_Buffer[3]==13) 
0626:  MOVF   30,W
0627:  SUBLW  53
0628:  BTFSS  03.2
0629:  GOTO   63B
062A:  MOVF   31,W
062B:  SUBLW  0D
062C:  BTFSS  03.2
062D:  GOTO   63B
....................                    { 
....................                     ImprimeMSGRS232(1);      //OK 
062E:  MOVLW  01
062F:  BSF    03.5
0630:  MOVWF  52
0631:  BCF    03.5
0632:  CALL   2E3
....................                     delay_ms(2); 
0633:  MOVLW  02
0634:  BSF    03.5
0635:  MOVWF  52
0636:  BCF    03.5
0637:  CALL   1F2
....................                     reset_cpu(); 
0638:  CLRF   0A
0639:  GOTO   000
....................                    } 
063A:  GOTO   63F
....................                  else 
....................                     ImprimeMSGRS232(0); 
063B:  BSF    03.5
063C:  CLRF   52
063D:  BCF    03.5
063E:  CALL   2E3
....................                break; 
063F:  GOTO   6DD
....................       case 'S':if(LinhaComando) 
0640:  BTFSS  5A.3
0641:  GOTO   6DD
....................                   if(Data_Buffer[2]=='W' && Data_Buffer[3]==13) 
0642:  MOVF   30,W
0643:  SUBLW  57
0644:  BTFSS  03.2
0645:  GOTO   6D9
0646:  MOVF   31,W
0647:  SUBLW  0D
0648:  BTFSS  03.2
0649:  GOTO   6D9
....................                    { 
....................                    fprintf(PORTA,"Tempo Limpeza Entrada de Camião = %Lu \n\r",Tempos[3]); 
064A:  MOVLW  25
064B:  BSF    03.6
064C:  MOVWF  0D
064D:  MOVLW  01
064E:  MOVWF  0F
064F:  MOVLW  22
0650:  BSF    03.5
0651:  BCF    03.6
0652:  MOVWF  47
0653:  BCF    03.5
0654:  CALL   46E
0655:  MOVLW  10
0656:  MOVWF  04
0657:  BSF    03.5
0658:  MOVF   27,W
0659:  MOVWF  48
065A:  MOVF   26,W
065B:  MOVWF  47
065C:  BCF    03.5
065D:  CALL   4AC
065E:  MOVLW  20
065F:  CLRWDT
0660:  BTFSS  0C.4
0661:  GOTO   65F
0662:  MOVWF  19
0663:  MOVLW  0A
0664:  CLRWDT
0665:  BTFSS  0C.4
0666:  GOTO   664
0667:  MOVWF  19
0668:  MOVLW  0D
0669:  CLRWDT
066A:  BTFSS  0C.4
066B:  GOTO   669
066C:  MOVWF  19
....................                    fprintf(PORTA,"Tempo Limpeza Saída de Camião = %Lu \n\r",Tempos[7]); 
066D:  MOVLW  4E
066E:  BSF    03.6
066F:  MOVWF  0D
0670:  MOVLW  01
0671:  MOVWF  0F
0672:  MOVLW  20
0673:  BSF    03.5
0674:  BCF    03.6
0675:  MOVWF  47
0676:  BCF    03.5
0677:  CALL   46E
0678:  MOVLW  10
0679:  MOVWF  04
067A:  BSF    03.5
067B:  MOVF   2F,W
067C:  MOVWF  48
067D:  MOVF   2E,W
067E:  MOVWF  47
067F:  BCF    03.5
0680:  CALL   4AC
0681:  MOVLW  20
0682:  CLRWDT
0683:  BTFSS  0C.4
0684:  GOTO   682
0685:  MOVWF  19
0686:  MOVLW  0A
0687:  CLRWDT
0688:  BTFSS  0C.4
0689:  GOTO   687
068A:  MOVWF  19
068B:  MOVLW  0D
068C:  CLRWDT
068D:  BTFSS  0C.4
068E:  GOTO   68C
068F:  MOVWF  19
....................                    fprintf(PORTA,"Tempo Verde Maximo Empilhadores = %Lu \n\r",Tempos[9]);                                      
0690:  MOVLW  75
0691:  BSF    03.6
0692:  MOVWF  0D
0693:  MOVLW  01
0694:  MOVWF  0F
0695:  BCF    03.0
0696:  MOVLW  22
0697:  BSF    03.5
0698:  BCF    03.6
0699:  MOVWF  47
069A:  BCF    03.5
069B:  CALL   50C
069C:  MOVLW  10
069D:  MOVWF  04
069E:  BSF    03.5
069F:  MOVF   33,W
06A0:  MOVWF  48
06A1:  MOVF   32,W
06A2:  MOVWF  47
06A3:  BCF    03.5
06A4:  CALL   4AC
06A5:  MOVLW  20
06A6:  CLRWDT
06A7:  BTFSS  0C.4
06A8:  GOTO   6A6
06A9:  MOVWF  19
06AA:  MOVLW  0A
06AB:  CLRWDT
06AC:  BTFSS  0C.4
06AD:  GOTO   6AB
06AE:  MOVWF  19
06AF:  MOVLW  0D
06B0:  CLRWDT
06B1:  BTFSS  0C.4
06B2:  GOTO   6B0
06B3:  MOVWF  19
....................                    fprintf(PORTA,"Tempo Limpeza Empilhadores G3 -> G2 = %Lu \n\r",Tempos[11]);           
06B4:  MOVLW  8A
06B5:  BSF    03.6
06B6:  MOVWF  0D
06B7:  MOVLW  01
06B8:  MOVWF  0F
06B9:  BCF    03.0
06BA:  MOVLW  26
06BB:  BSF    03.5
06BC:  BCF    03.6
06BD:  MOVWF  47
06BE:  BCF    03.5
06BF:  CALL   50C
06C0:  MOVLW  10
06C1:  MOVWF  04
06C2:  BSF    03.5
06C3:  MOVF   37,W
06C4:  MOVWF  48
06C5:  MOVF   36,W
06C6:  MOVWF  47
06C7:  BCF    03.5
06C8:  CALL   4AC
06C9:  MOVLW  20
06CA:  CLRWDT
06CB:  BTFSS  0C.4
06CC:  GOTO   6CA
06CD:  MOVWF  19
06CE:  MOVLW  0A
06CF:  CLRWDT
06D0:  BTFSS  0C.4
06D1:  GOTO   6CF
06D2:  MOVWF  19
06D3:  MOVLW  0D
06D4:  CLRWDT
06D5:  BTFSS  0C.4
06D6:  GOTO   6D4
06D7:  MOVWF  19
....................                    } 
06D8:  GOTO   6DD
....................                  else 
....................                     ImprimeMSGRS232(0); 
06D9:  BSF    03.5
06DA:  CLRF   52
06DB:  BCF    03.5
06DC:  CALL   2E3
....................                break;    
....................                 
....................                 
....................                 
....................                          
....................            //default:ImprimeMSGRS232(0); 
....................            //        break;       
....................         } 
06DD:  BSF    0A.3
06DE:  GOTO   4E4 (RETURN)
....................          
.................... } 
....................  
.................... void LER_ENTRADAS() 
.................... { 
....................  
.................... //Leitura Espiras Simples 
....................  RESTART_WDT(); 
*
0800:  CLRWDT
....................  
....................  //Entradas digitais 
.................... switch(auxI1on){ 
0801:  MOVF   52,W
0802:  BTFSC  03.2
0803:  GOTO   008
0804:  XORLW  01
0805:  BTFSC  03.2
0806:  GOTO   00F
0807:  GOTO   02B
....................       case 0:if(input(IN1)) 
0808:  BTFSS  07.5
0809:  GOTO   00E
....................                { 
....................                 TimerI1on=0; 
080A:  CLRF   43
080B:  CLRF   42
....................                 auxI1on=1; 
080C:  MOVLW  01
080D:  MOVWF  52
....................                } 
....................              break;   
080E:  GOTO   02B
....................       case 1:if(TimerI1on<10)          //50ms 
080F:  MOVF   43,F
0810:  BTFSS  03.2
0811:  GOTO   01C
0812:  MOVF   42,W
0813:  SUBLW  09
0814:  BTFSS  03.0
0815:  GOTO   01C
....................                {if(!input(IN1)) 
0816:  BTFSC  07.5
0817:  GOTO   01B
....................                   {auxI1on=0;          //Se houve um pico ou foi um sinal falso 
0818:  CLRF   52
....................                    TimerI1on=0;       
0819:  CLRF   43
081A:  CLRF   42
....................                   }             
....................                } 
081B:  GOTO   02A
....................              else 
....................                { 
....................                if(debugInputs) 
081C:  BTFSS  5A.4
081D:  GOTO   027
....................                   fprintf(PORTA,"Input 1 -> ON\n\r"); 
081E:  MOVLW  A1
081F:  BSF    03.6
0820:  MOVWF  0D
0821:  MOVLW  01
0822:  MOVWF  0F
0823:  BCF    0A.3
0824:  BCF    03.6
0825:  CALL   207
0826:  BSF    0A.3
....................                 ING_I1=1;         //Espira de Entrada Ocupada 
0827:  BSF    38.2
....................                 MEM_I1=1; 
0828:  BSF    38.6
....................                 auxI1on=0;          
0829:  CLRF   52
....................                } 
....................              break; 
082A:  GOTO   02B
....................          } 
....................   
.................... switch(auxI1off){ 
082B:  MOVF   53,W
082C:  BTFSC  03.2
082D:  GOTO   032
082E:  XORLW  01
082F:  BTFSC  03.2
0830:  GOTO   039
0831:  GOTO   054
....................       case 0:if(!input(IN1)) 
0832:  BTFSC  07.5
0833:  GOTO   038
....................                { 
....................                 TimerI1off=0; 
0834:  CLRF   45
0835:  CLRF   44
....................                 auxI1off=1; 
0836:  MOVLW  01
0837:  MOVWF  53
....................                } 
....................              break;   
0838:  GOTO   054
....................       case 1:if(TimerI1off<10)          //50ms 
0839:  MOVF   45,F
083A:  BTFSS  03.2
083B:  GOTO   046
083C:  MOVF   44,W
083D:  SUBLW  09
083E:  BTFSS  03.0
083F:  GOTO   046
....................                {if(input(IN1)) 
0840:  BTFSS  07.5
0841:  GOTO   045
....................                   {auxI1off=0;          //Se houve um pico ou foi um sinal falso 
0842:  CLRF   53
....................                    TimerI1off=0;       
0843:  CLRF   45
0844:  CLRF   44
....................                   }             
....................                } 
0845:  GOTO   053
....................              else 
....................                {if(debugInputs) 
0846:  BTFSS  5A.4
0847:  GOTO   051
....................                   fprintf(PORTA,"Input 1 -> OFF\n\r"); 
0848:  MOVLW  A9
0849:  BSF    03.6
084A:  MOVWF  0D
084B:  MOVLW  01
084C:  MOVWF  0F
084D:  BCF    0A.3
084E:  BCF    03.6
084F:  CALL   207
0850:  BSF    0A.3
....................                 ING_I1=0;         //Espira de Entrada Ocupada 
0851:  BCF    38.2
....................                 auxI1off=0;          
0852:  CLRF   53
....................                } 
....................              break; 
0853:  GOTO   054
....................          } 
....................  
.................... switch(auxI2on){ 
0854:  MOVF   54,W
0855:  BTFSC  03.2
0856:  GOTO   05B
0857:  XORLW  01
0858:  BTFSC  03.2
0859:  GOTO   062
085A:  GOTO   07E
....................       case 0:if(input(IN2)) 
085B:  BTFSS  07.4
085C:  GOTO   061
....................                { 
....................                 TimerI2on=0; 
085D:  CLRF   47
085E:  CLRF   46
....................                 auxI2on=1; 
085F:  MOVLW  01
0860:  MOVWF  54
....................                } 
....................              break;   
0861:  GOTO   07E
....................       case 1:if(TimerI2on<10)          //50ms 
0862:  MOVF   47,F
0863:  BTFSS  03.2
0864:  GOTO   06F
0865:  MOVF   46,W
0866:  SUBLW  09
0867:  BTFSS  03.0
0868:  GOTO   06F
....................                {if(!input(IN2)) 
0869:  BTFSC  07.4
086A:  GOTO   06E
....................                   {auxI2on=0;          //Se houve um pico ou foi um sinal falso 
086B:  CLRF   54
....................                    TimerI2on=0;       
086C:  CLRF   47
086D:  CLRF   46
....................                   }             
....................                } 
086E:  GOTO   07D
....................              else 
....................                {if(debugInputs) 
086F:  BTFSS  5A.4
0870:  GOTO   07A
....................                   fprintf(PORTA,"Input 2-> ON\n\r"); 
0871:  MOVLW  B2
0872:  BSF    03.6
0873:  MOVWF  0D
0874:  MOVLW  01
0875:  MOVWF  0F
0876:  BCF    0A.3
0877:  BCF    03.6
0878:  CALL   207
0879:  BSF    0A.3
....................                 ING_I2=1;         //Espira de Entrada Ocupada 
087A:  BSF    38.3
....................                 MEM_I2=1;      
087B:  BSF    38.7
....................                 auxI2on=0;          
087C:  CLRF   54
....................                } 
....................              break; 
087D:  GOTO   07E
....................          } 
....................   
.................... switch(auxI2off){ 
087E:  MOVF   55,W
087F:  BTFSC  03.2
0880:  GOTO   085
0881:  XORLW  01
0882:  BTFSC  03.2
0883:  GOTO   08C
0884:  GOTO   0A7
....................       case 0:if(!input(IN2)) 
0885:  BTFSC  07.4
0886:  GOTO   08B
....................                { 
....................                 TimerI2off=0; 
0887:  CLRF   49
0888:  CLRF   48
....................                 auxI2off=1; 
0889:  MOVLW  01
088A:  MOVWF  55
....................                } 
....................              break;   
088B:  GOTO   0A7
....................       case 1:if(TimerI2off<10)          //50ms 
088C:  MOVF   49,F
088D:  BTFSS  03.2
088E:  GOTO   099
088F:  MOVF   48,W
0890:  SUBLW  09
0891:  BTFSS  03.0
0892:  GOTO   099
....................                {if(input(IN2)) 
0893:  BTFSS  07.4
0894:  GOTO   098
....................                   {auxI2off=0;          //Se houve um pico ou foi um sinal falso 
0895:  CLRF   55
....................                    TimerI2off=0;       
0896:  CLRF   49
0897:  CLRF   48
....................                   }             
....................                } 
0898:  GOTO   0A6
....................              else 
....................                {if(debugInputs) 
0899:  BTFSS  5A.4
089A:  GOTO   0A4
....................                   fprintf(PORTA,"Input 2-> OFF\n\r"); 
089B:  MOVLW  BA
089C:  BSF    03.6
089D:  MOVWF  0D
089E:  MOVLW  01
089F:  MOVWF  0F
08A0:  BCF    0A.3
08A1:  BCF    03.6
08A2:  CALL   207
08A3:  BSF    0A.3
....................                 ING_I2=0;         //Espira de Entrada Ocupada 
08A4:  BCF    38.3
....................                 auxI2off=0;          
08A5:  CLRF   55
....................                } 
....................              break; 
08A6:  GOTO   0A7
....................          } 
....................  
....................  
.................... switch(auxI3on){ 
08A7:  MOVF   56,W
08A8:  BTFSC  03.2
08A9:  GOTO   0AE
08AA:  XORLW  01
08AB:  BTFSC  03.2
08AC:  GOTO   0B5
08AD:  GOTO   0D1
....................       case 0:if(input(IN3)) 
08AE:  BTFSS  07.3
08AF:  GOTO   0B4
....................                { 
....................                 TimerI3on=0; 
08B0:  CLRF   4B
08B1:  CLRF   4A
....................                 auxI3on=1; 
08B2:  MOVLW  01
08B3:  MOVWF  56
....................                } 
....................              break;   
08B4:  GOTO   0D1
....................       case 1:if(TimerI3on<10)          //50ms 
08B5:  MOVF   4B,F
08B6:  BTFSS  03.2
08B7:  GOTO   0C2
08B8:  MOVF   4A,W
08B9:  SUBLW  09
08BA:  BTFSS  03.0
08BB:  GOTO   0C2
....................                {if(!input(IN3)) 
08BC:  BTFSC  07.3
08BD:  GOTO   0C1
....................                   {auxI3on=0;          //Se houve um pico ou foi um sinal falso 
08BE:  CLRF   56
....................                    TimerI3on=0;       
08BF:  CLRF   4B
08C0:  CLRF   4A
....................                   }             
....................                } 
08C1:  GOTO   0D0
....................              else 
....................                {if(debugInputs) 
08C2:  BTFSS  5A.4
08C3:  GOTO   0CD
....................                   fprintf(PORTA,"Input 3-> ON\n\r"); 
08C4:  MOVLW  C2
08C5:  BSF    03.6
08C6:  MOVWF  0D
08C7:  MOVLW  01
08C8:  MOVWF  0F
08C9:  BCF    0A.3
08CA:  BCF    03.6
08CB:  CALL   207
08CC:  BSF    0A.3
....................                 ING_I3=1;         //Espira de Entrada Ocupada 
08CD:  BSF    38.4
....................                 MEM_I3=1; 
08CE:  BSF    5A.0
....................                 auxI3on=0;          
08CF:  CLRF   56
....................                } 
....................              break; 
08D0:  GOTO   0D1
....................          } 
....................   
.................... switch(auxI3off){ 
08D1:  MOVF   57,W
08D2:  BTFSC  03.2
08D3:  GOTO   0D8
08D4:  XORLW  01
08D5:  BTFSC  03.2
08D6:  GOTO   0DF
08D7:  GOTO   0FA
....................       case 0:if(!input(IN3)) 
08D8:  BTFSC  07.3
08D9:  GOTO   0DE
....................                { 
....................                 TimerI3off=0; 
08DA:  CLRF   4D
08DB:  CLRF   4C
....................                 auxI3off=1; 
08DC:  MOVLW  01
08DD:  MOVWF  57
....................                } 
....................              break;   
08DE:  GOTO   0FA
....................       case 1:if(TimerI3off<10)          //50ms 
08DF:  MOVF   4D,F
08E0:  BTFSS  03.2
08E1:  GOTO   0EC
08E2:  MOVF   4C,W
08E3:  SUBLW  09
08E4:  BTFSS  03.0
08E5:  GOTO   0EC
....................                {if(input(IN3)) 
08E6:  BTFSS  07.3
08E7:  GOTO   0EB
....................                   {auxI3off=0;          //Se houve um pico ou foi um sinal falso 
08E8:  CLRF   57
....................                    TimerI3off=0;       
08E9:  CLRF   4D
08EA:  CLRF   4C
....................                   }             
....................                } 
08EB:  GOTO   0F9
....................              else 
....................                {if(debugInputs) 
08EC:  BTFSS  5A.4
08ED:  GOTO   0F7
....................                   fprintf(PORTA,"Input 3-> OFF\n\r"); 
08EE:  MOVLW  CA
08EF:  BSF    03.6
08F0:  MOVWF  0D
08F1:  MOVLW  01
08F2:  MOVWF  0F
08F3:  BCF    0A.3
08F4:  BCF    03.6
08F5:  CALL   207
08F6:  BSF    0A.3
....................                 ING_I3=0;         //Espira de Entrada Ocupada               
08F7:  BCF    38.4
....................                 auxI3off=0;          
08F8:  CLRF   57
....................                } 
....................              break; 
08F9:  GOTO   0FA
....................          } 
....................  
....................  
.................... switch(auxI4on){ 
08FA:  MOVF   58,W
08FB:  BTFSC  03.2
08FC:  GOTO   101
08FD:  XORLW  01
08FE:  BTFSC  03.2
08FF:  GOTO   108
0900:  GOTO   124
....................       case 0:if(input(IN4)) 
0901:  BTFSS  07.2
0902:  GOTO   107
....................                { 
....................                 TimerI4on=0; 
0903:  CLRF   4F
0904:  CLRF   4E
....................                 auxI4on=1; 
0905:  MOVLW  01
0906:  MOVWF  58
....................                } 
....................              break;   
0907:  GOTO   124
....................       case 1:if(TimerI4on<10)          //50ms 
0908:  MOVF   4F,F
0909:  BTFSS  03.2
090A:  GOTO   115
090B:  MOVF   4E,W
090C:  SUBLW  09
090D:  BTFSS  03.0
090E:  GOTO   115
....................                {if(!input(IN4)) 
090F:  BTFSC  07.2
0910:  GOTO   114
....................                   {auxI4on=0;          //Se houve um pico ou foi um sinal falso 
0911:  CLRF   58
....................                    TimerI4on=0;       
0912:  CLRF   4F
0913:  CLRF   4E
....................                   }             
....................                } 
0914:  GOTO   123
....................              else 
....................                {if(debugInputs) 
0915:  BTFSS  5A.4
0916:  GOTO   120
....................                   fprintf(PORTA,"Input 4-> ON\n\r"); 
0917:  MOVLW  D2
0918:  BSF    03.6
0919:  MOVWF  0D
091A:  MOVLW  01
091B:  MOVWF  0F
091C:  BCF    0A.3
091D:  BCF    03.6
091E:  CALL   207
091F:  BSF    0A.3
....................                 ING_I4=1;         //Espira de Entrada Ocupada 
0920:  BSF    38.5
....................                 MEM_I4=1;    
0921:  BSF    5A.1
....................                 auxI4on=0;          
0922:  CLRF   58
....................                } 
....................              break; 
0923:  GOTO   124
....................          } 
....................   
.................... switch(auxI4off){ 
0924:  MOVF   59,W
0925:  BTFSC  03.2
0926:  GOTO   12B
0927:  XORLW  01
0928:  BTFSC  03.2
0929:  GOTO   132
092A:  GOTO   14D
....................       case 0:if(!input(IN4)) 
092B:  BTFSC  07.2
092C:  GOTO   131
....................                { 
....................                 TimerI4off=0; 
092D:  CLRF   51
092E:  CLRF   50
....................                 auxI4off=1; 
092F:  MOVLW  01
0930:  MOVWF  59
....................                } 
....................              break;   
0931:  GOTO   14D
....................       case 1:if(TimerI4off<10)          //50ms 
0932:  MOVF   51,F
0933:  BTFSS  03.2
0934:  GOTO   13F
0935:  MOVF   50,W
0936:  SUBLW  09
0937:  BTFSS  03.0
0938:  GOTO   13F
....................                {if(input(IN4)) 
0939:  BTFSS  07.2
093A:  GOTO   13E
....................                   {auxI4off=0;          //Se houve um pico ou foi um sinal falso 
093B:  CLRF   59
....................                    TimerI4off=0;       
093C:  CLRF   51
093D:  CLRF   50
....................                   }             
....................                } 
093E:  GOTO   14C
....................              else 
....................                {if(debugInputs) 
093F:  BTFSS  5A.4
0940:  GOTO   14A
....................                   fprintf(PORTA,"Input 4-> OFF\n\r"); 
0941:  MOVLW  DA
0942:  BSF    03.6
0943:  MOVWF  0D
0944:  MOVLW  01
0945:  MOVWF  0F
0946:  BCF    0A.3
0947:  BCF    03.6
0948:  CALL   207
0949:  BSF    0A.3
....................                 ING_I4=0;         //Espira de Entrada Ocupada 
094A:  BCF    38.5
....................                 auxI4off=0; 
094B:  CLRF   59
....................                } 
....................              break; 
094C:  GOTO   14D
....................          } 
094D:  BSF    0A.3
094E:  GOTO   4F4 (RETURN)
.................... } 
....................  
.................... //Tricolor 0: Verde, 1:Amarelo, 2: Vermelho, 3:Blink  , 4: OFF, >=5: Mantêm estado anterior 
.................... //BUS: 0: Verde, 2: Vermelho, 3:Blink  , 4: OFF; 5: Verde c/ Blink, 6:Vermelho c/ Blink, 7:Verde c/ Yellow fix, 8: Vermelho c/ Yellow fix ;>10: Mantêm estado anterior  
.................... void EstadoGrupos(int8 G1, int8 G2, int8 G3, int8 G4) 
.................... { 
....................  
.................... switch(G1){ 
*
0283:  BSF    03.5
0284:  MOVF   42,W
0285:  XORLW  00
0286:  BCF    03.5
0287:  BTFSC  03.2
0288:  GOTO   28D
0289:  XORLW  01
028A:  BTFSC  03.2
028B:  GOTO   291
028C:  GOTO   295
....................       case 0:bit_clear(saida,0); 
028D:  BCF    5F.0
....................              bit_set(saida,1); 
028E:  BSF    5F.1
....................              EstadoG1=0;              // Verde 
028F:  CLRF   5B
....................              break;   
0290:  GOTO   295
....................       case 1:bit_set(saida,0); 
0291:  BSF    5F.0
....................              bit_clear(saida,1); 
0292:  BCF    5F.1
....................              EstadoG1=1;             // Vermelho 
0293:  MOVLW  01
0294:  MOVWF  5B
....................              break; 
....................           }       
....................  
.................... switch(G2){ 
0295:  BSF    03.5
0296:  MOVF   43,W
0297:  XORLW  00
0298:  BCF    03.5
0299:  BTFSC  03.2
029A:  GOTO   29F
029B:  XORLW  01
029C:  BTFSC  03.2
029D:  GOTO   2A3
029E:  GOTO   2A7
....................       case 0:bit_clear(saida,2); 
029F:  BCF    5F.2
....................              bit_set(saida,3); 
02A0:  BSF    5F.3
....................              EstadoG2=0;              // Verde 
02A1:  CLRF   5C
....................              break;   
02A2:  GOTO   2A7
....................       case 1:bit_set(saida,2); 
02A3:  BSF    5F.2
....................              bit_clear(saida,3); 
02A4:  BCF    5F.3
....................              EstadoG2=1;             // Vermelho 
02A5:  MOVLW  01
02A6:  MOVWF  5C
....................              break; 
....................           } 
....................  
.................... switch(G3){ 
02A7:  BSF    03.5
02A8:  MOVF   44,W
02A9:  XORLW  00
02AA:  BCF    03.5
02AB:  BTFSC  03.2
02AC:  GOTO   2B1
02AD:  XORLW  01
02AE:  BTFSC  03.2
02AF:  GOTO   2B5
02B0:  GOTO   2B9
....................       case 0:bit_clear(saida,4); 
02B1:  BCF    5F.4
....................              bit_set(saida,5); 
02B2:  BSF    5F.5
....................              EstadoG3=0;              // Verde 
02B3:  CLRF   5D
....................              break;   
02B4:  GOTO   2B9
....................       case 1:bit_set(saida,4); 
02B5:  BSF    5F.4
....................              bit_clear(saida,5); 
02B6:  BCF    5F.5
....................              EstadoG3=1;             // Vermelho 
02B7:  MOVLW  01
02B8:  MOVWF  5D
....................              break; 
....................           } 
....................  
.................... switch(G4){ 
02B9:  BSF    03.5
02BA:  MOVF   45,W
02BB:  XORLW  00
02BC:  BCF    03.5
02BD:  BTFSC  03.2
02BE:  GOTO   2C3
02BF:  XORLW  01
02C0:  BTFSC  03.2
02C1:  GOTO   2C7
02C2:  GOTO   2CB
....................       case 0:bit_clear(saida,6); 
02C3:  BCF    5F.6
....................              bit_set(saida,7); 
02C4:  BSF    5F.7
....................              EstadoG4=0;              // Verde 
02C5:  CLRF   5E
....................              break;   
02C6:  GOTO   2CB
....................       case 1:bit_set(saida,6); 
02C7:  BSF    5F.6
....................              bit_clear(saida,7); 
02C8:  BCF    5F.7
....................              EstadoG4=1;             // Vermelho 
02C9:  MOVLW  01
02CA:  MOVWF  5E
....................              break; 
....................           } 
02CB:  RETURN
....................  
.................... } 
....................  
....................  
.................... //++++++++++++++++++++++++++++++ Controlo Independente Rampa A  ++++++++++++++++++++++++++++++++++++++  
.................... void ControlLights() 
.................... { 
....................   switch(stepR1){ 
*
094F:  MOVF   65,W
0950:  ADDLW  F9
0951:  BTFSC  03.0
0952:  GOTO   23D
0953:  ADDLW  07
0954:  GOTO   335
....................         case 0:if(TIMER_A>=Tempos[0]-Tempos[2]) //Verde mínimo G1 
0955:  BSF    03.5
0956:  MOVF   24,W
0957:  SUBWF  20,W
0958:  MOVWF  77
0959:  MOVF   21,W
095A:  MOVWF  7A
095B:  MOVF   25,W
095C:  BTFSS  03.0
095D:  INCFSZ 25,W
095E:  SUBWF  7A,F
095F:  MOVF   77,W
0960:  MOVWF  78
0961:  MOVF   7A,W
0962:  BCF    03.5
0963:  SUBWF  3D,W
0964:  BTFSS  03.0
0965:  GOTO   175
0966:  BTFSS  03.2
0967:  GOTO   16C
0968:  MOVF   78,W
0969:  SUBWF  3C,W
096A:  BTFSS  03.0
096B:  GOTO   175
....................                   { 
....................                    stepR1=1; 
096C:  MOVLW  01
096D:  MOVWF  65
....................                    auxTimeR1=Tempos[0]-Tempos[2]; 
096E:  BSF    03.5
096F:  MOVF   24,W
0970:  SUBWF  20,W
0971:  BCF    03.5
0972:  MOVWF  67
....................                    TIMER_A=0; 
0973:  CLRF   3D
0974:  CLRF   3C
....................                   } 
....................                break; 
0975:  GOTO   23D
....................         case 1:if(TIMER_A>=Tempos[2])  
0976:  BSF    03.5
0977:  MOVF   25,W
0978:  BCF    03.5
0979:  SUBWF  3D,W
097A:  BTFSS  03.0
097B:  GOTO   1AD
097C:  BTFSS  03.2
097D:  GOTO   184
097E:  BSF    03.5
097F:  MOVF   24,W
0980:  BCF    03.5
0981:  SUBWF  3C,W
0982:  BTFSS  03.0
0983:  GOTO   1AD
....................                  { 
....................                   auxTimeR1=auxTimeR1+Tempos[2]; 
0984:  BSF    03.5
0985:  MOVF   24,W
0986:  BCF    03.5
0987:  ADDWF  67,F
....................                   if((auxTimeR1>Tempos[1]) && (MEM_I3))  //Chamada da Botoneira Acucar 
0988:  BSF    03.5
0989:  MOVF   23,F
098A:  BTFSS  03.2
098B:  GOTO   1AA
098C:  BCF    03.5
098D:  MOVF   67,W
098E:  BSF    03.5
098F:  SUBWF  22,W
0990:  BTFSC  03.0
0991:  GOTO   1AA
0992:  BCF    03.5
0993:  BTFSC  5A.0
0994:  GOTO   197
0995:  BSF    03.5
0996:  GOTO   1AA
....................                     {stepR1=2; 
0997:  MOVLW  02
0998:  MOVWF  65
....................                      TIMER_A=0; 
0999:  CLRF   3D
099A:  CLRF   3C
....................                      EstadoGrupos(1,3,3,1); //0: Verde, 1:VErmelho,3:Mantêm        //ALLRED 
099B:  MOVLW  01
099C:  BSF    03.5
099D:  MOVWF  42
099E:  MOVLW  03
099F:  MOVWF  43
09A0:  MOVWF  44
09A1:  MOVLW  01
09A2:  MOVWF  45
09A3:  BCF    0A.3
09A4:  BCF    03.5
09A5:  CALL   283
09A6:  BSF    0A.3
....................                      ChamadaAcucar=1; 
09A7:  BSF    5A.5
....................                     } 
09A8:  GOTO   1AD
09A9:  BSF    03.5
....................                   else 
....................                     {TIMER_A=0;                      
09AA:  BCF    03.5
09AB:  CLRF   3D
09AC:  CLRF   3C
....................                     } 
....................                  } 
....................                        
....................                break;    
09AD:  GOTO   23D
....................         case 2:if(TIMER_A>=Tempos[3] && LimpezaAcucar)      //Tempo de limpeza maior 
09AE:  BSF    03.5
09AF:  MOVF   27,W
09B0:  BCF    03.5
09B1:  SUBWF  3D,W
09B2:  BTFSS  03.0
09B3:  GOTO   1CC
09B4:  BTFSS  03.2
09B5:  GOTO   1BC
09B6:  BSF    03.5
09B7:  MOVF   26,W
09B8:  BCF    03.5
09B9:  SUBWF  3C,W
09BA:  BTFSS  03.0
09BB:  GOTO   1CC
09BC:  BTFSS  5A.6
09BD:  GOTO   1CC
....................                  {stepR1=3; 
09BE:  MOVLW  03
09BF:  MOVWF  65
....................                   TIMER_A=0; 
09C0:  CLRF   3D
09C1:  CLRF   3C
....................                   EstadoGrupos(0,3,3,1); //0: Verde, 1:VErmelho,3:Mantêm           //G2 Verde                 
09C2:  BSF    03.5
09C3:  CLRF   42
09C4:  MOVWF  43
09C5:  MOVWF  44
09C6:  MOVLW  01
09C7:  MOVWF  45
09C8:  BCF    0A.3
09C9:  BCF    03.5
09CA:  CALL   283
09CB:  BSF    0A.3
....................                  } 
....................                break; 
09CC:  GOTO   23D
....................         case 3:if(TIMER_A>=Tempos[4]-Tempos[6]) //Verde mínimo G2 
09CD:  BSF    03.5
09CE:  MOVF   2C,W
09CF:  SUBWF  28,W
09D0:  MOVWF  77
09D1:  MOVF   29,W
09D2:  MOVWF  7A
09D3:  MOVF   2D,W
09D4:  BTFSS  03.0
09D5:  INCFSZ 2D,W
09D6:  SUBWF  7A,F
09D7:  MOVF   77,W
09D8:  MOVWF  78
09D9:  MOVF   7A,W
09DA:  BCF    03.5
09DB:  SUBWF  3D,W
09DC:  BTFSS  03.0
09DD:  GOTO   1EE
09DE:  BTFSS  03.2
09DF:  GOTO   1E4
09E0:  MOVF   78,W
09E1:  SUBWF  3C,W
09E2:  BTFSS  03.0
09E3:  GOTO   1EE
....................                   { 
....................                    MEM_I3=0; 
09E4:  BCF    5A.0
....................                    stepR1=4; 
09E5:  MOVLW  04
09E6:  MOVWF  65
....................                    auxTimeR1=Tempos[4]-Tempos[6]; 
09E7:  BSF    03.5
09E8:  MOVF   2C,W
09E9:  SUBWF  28,W
09EA:  BCF    03.5
09EB:  MOVWF  67
....................                    TIMER_A=0; 
09EC:  CLRF   3D
09ED:  CLRF   3C
....................                   } 
....................                break;         
09EE:  GOTO   23D
....................         case 4:if(TIMER_A>=Tempos[6])  
09EF:  BSF    03.5
09F0:  MOVF   2D,W
09F1:  BCF    03.5
09F2:  SUBWF  3D,W
09F3:  BTFSS  03.0
09F4:  GOTO   217
09F5:  BTFSS  03.2
09F6:  GOTO   1FD
09F7:  BSF    03.5
09F8:  MOVF   2C,W
09F9:  BCF    03.5
09FA:  SUBWF  3C,W
09FB:  BTFSS  03.0
09FC:  GOTO   217
....................                  { 
....................                   auxTimeR1=auxTimeR1+Tempos[6]; 
09FD:  BSF    03.5
09FE:  MOVF   2C,W
09FF:  BCF    03.5
0A00:  ADDWF  67,F
....................                   if(ING_I1 && ING_I2) 
0A01:  BTFSS  38.2
0A02:  GOTO   215
0A03:  BTFSS  38.3
0A04:  GOTO   215
....................                     {stepR1=5;                                         
0A05:  MOVLW  05
0A06:  MOVWF  65
....................                      EstadoGrupos(1,3,3,1); //0: Verde, 1:VErmelho,3:Mantêm        //ALLRED 
0A07:  MOVLW  01
0A08:  BSF    03.5
0A09:  MOVWF  42
0A0A:  MOVLW  03
0A0B:  MOVWF  43
0A0C:  MOVWF  44
0A0D:  MOVLW  01
0A0E:  MOVWF  45
0A0F:  BCF    0A.3
0A10:  BCF    03.5
0A11:  CALL   283
0A12:  BSF    0A.3
....................                      ChamadaAcucar=0;  
0A13:  BCF    5A.5
....................                     } 
0A14:  GOTO   217
....................                   else 
....................                     {TIMER_A=0;                      
0A15:  CLRF   3D
0A16:  CLRF   3C
....................                     } 
....................                  } 
....................                break; 
0A17:  GOTO   23D
....................         case 5:if( ( !ING_I1 && !ING_I2 ) )    //Sentido Saída p/ entrada 
0A18:  BTFSC  38.2
0A19:  GOTO   220
0A1A:  BTFSC  38.3
0A1B:  GOTO   220
....................                  {                   
....................                  stepR1=6; 
0A1C:  MOVLW  06
0A1D:  MOVWF  65
....................                  TIMER_A=0; 
0A1E:  CLRF   3D
0A1F:  CLRF   3C
....................                  } 
....................                break;                 
0A20:  GOTO   23D
....................        case 6: if(TIMER_A>=Tempos[7]){  
0A21:  BSF    03.5
0A22:  MOVF   2F,W
0A23:  BCF    03.5
0A24:  SUBWF  3D,W
0A25:  BTFSS  03.0
0A26:  GOTO   23D
0A27:  BTFSS  03.2
0A28:  GOTO   22F
0A29:  BSF    03.5
0A2A:  MOVF   2E,W
0A2B:  BCF    03.5
0A2C:  SUBWF  3C,W
0A2D:  BTFSS  03.0
0A2E:  GOTO   23D
....................                   stepR1=0;                                   
0A2F:  CLRF   65
....................                   TIMER_A=0; 
0A30:  CLRF   3D
0A31:  CLRF   3C
....................                   EstadoGrupos(1,3,3,0); //0: Verde, 1:VErmelho,3:Mantêm           //G2 Verde 
0A32:  MOVLW  01
0A33:  BSF    03.5
0A34:  MOVWF  42
0A35:  MOVLW  03
0A36:  MOVWF  43
0A37:  MOVWF  44
0A38:  CLRF   45
0A39:  BCF    0A.3
0A3A:  BCF    03.5
0A3B:  CALL   283
0A3C:  BSF    0A.3
....................                  } //fprintf(PORTA,"Libertou Por contagem\n\r",); 
....................                  break;               
....................                  } 
....................                    
....................             
....................      
....................          
....................  // Rampa 2 - Semaforos 2 e 3 - Empilhadoras 
....................  switch(stepR2){ 
0A3D:  MOVF   66,W
0A3E:  ADDLW  FA
0A3F:  BTFSC  03.0
0A40:  GOTO   333
0A41:  ADDLW  06
0A42:  GOTO   340
....................   
....................         case 0:if(TIMER_B>=Tempos[8]-Tempos[10]) //Verde mínimo G3 
0A43:  BSF    03.5
0A44:  MOVF   34,W
0A45:  SUBWF  30,W
0A46:  MOVWF  77
0A47:  MOVF   31,W
0A48:  MOVWF  7A
0A49:  MOVF   35,W
0A4A:  BTFSS  03.0
0A4B:  INCFSZ 35,W
0A4C:  SUBWF  7A,F
0A4D:  MOVF   77,W
0A4E:  MOVWF  78
0A4F:  MOVF   7A,W
0A50:  BCF    03.5
0A51:  SUBWF  3F,W
0A52:  BTFSS  03.0
0A53:  GOTO   263
0A54:  BTFSS  03.2
0A55:  GOTO   25A
0A56:  MOVF   78,W
0A57:  SUBWF  3E,W
0A58:  BTFSS  03.0
0A59:  GOTO   263
....................                   { 
....................                    stepR2=1; 
0A5A:  MOVLW  01
0A5B:  MOVWF  66
....................                    auxTimeR2=Tempos[8]-Tempos[10]; 
0A5C:  BSF    03.5
0A5D:  MOVF   34,W
0A5E:  SUBWF  30,W
0A5F:  BCF    03.5
0A60:  MOVWF  68
....................                    TIMER_B=0; 
0A61:  CLRF   3F
0A62:  CLRF   3E
....................                   } 
....................                break; 
0A63:  GOTO   333
....................         case 1:if(TIMER_B>=Tempos[10])  
0A64:  BSF    03.5
0A65:  MOVF   35,W
0A66:  BCF    03.5
0A67:  SUBWF  3F,W
0A68:  BTFSS  03.0
0A69:  GOTO   29C
0A6A:  BTFSS  03.2
0A6B:  GOTO   272
0A6C:  BSF    03.5
0A6D:  MOVF   34,W
0A6E:  BCF    03.5
0A6F:  SUBWF  3E,W
0A70:  BTFSS  03.0
0A71:  GOTO   29C
....................                  { 
....................                   auxTimeR2=auxTimeR2+Tempos[10]; 
0A72:  BSF    03.5
0A73:  MOVF   34,W
0A74:  BCF    03.5
0A75:  ADDWF  68,F
....................                   if((auxTimeR2>Tempos[9]) && (MEM_I4 || ChamadaAcucar))   
0A76:  BSF    03.5
0A77:  MOVF   33,F
0A78:  BTFSS  03.2
0A79:  GOTO   299
0A7A:  BCF    03.5
0A7B:  MOVF   68,W
0A7C:  BSF    03.5
0A7D:  SUBWF  32,W
0A7E:  BTFSC  03.0
0A7F:  GOTO   299
0A80:  BCF    03.5
0A81:  BTFSC  5A.1
0A82:  GOTO   287
0A83:  BTFSC  5A.5
0A84:  GOTO   287
0A85:  BSF    03.5
0A86:  GOTO   299
....................                     {stepR2=2; 
0A87:  MOVLW  02
0A88:  MOVWF  66
....................                      TIMER_B=0; 
0A89:  CLRF   3F
0A8A:  CLRF   3E
....................                      EstadoGrupos(3,1,1,3); //0: Verde, 1:VErmelho,3:Mantêm        //ALLRED                      
0A8B:  MOVLW  03
0A8C:  BSF    03.5
0A8D:  MOVWF  42
0A8E:  MOVLW  01
0A8F:  MOVWF  43
0A90:  MOVWF  44
0A91:  MOVLW  03
0A92:  MOVWF  45
0A93:  BCF    0A.3
0A94:  BCF    03.5
0A95:  CALL   283
0A96:  BSF    0A.3
....................                     } 
0A97:  GOTO   29C
0A98:  BSF    03.5
....................                   else 
....................                     {TIMER_B=0;                      
0A99:  BCF    03.5
0A9A:  CLRF   3F
0A9B:  CLRF   3E
....................                     } 
....................                  } 
....................                break;                             
0A9C:  GOTO   333
....................         case 2:if(TIMER_B>=Tempos[11]) 
0A9D:  BSF    03.5
0A9E:  MOVF   37,W
0A9F:  BCF    03.5
0AA0:  SUBWF  3F,W
0AA1:  BTFSS  03.0
0AA2:  GOTO   2BB
0AA3:  BTFSS  03.2
0AA4:  GOTO   2AB
0AA5:  BSF    03.5
0AA6:  MOVF   36,W
0AA7:  BCF    03.5
0AA8:  SUBWF  3E,W
0AA9:  BTFSS  03.0
0AAA:  GOTO   2BB
....................                  { 
....................                   LimpezaAcucar=1; 
0AAB:  BSF    5A.6
....................                   stepR2=3; 
0AAC:  MOVLW  03
0AAD:  MOVWF  66
....................                   TIMER_B=0; 
0AAE:  CLRF   3F
0AAF:  CLRF   3E
....................                   EstadoGrupos(3,0,1,3); //0: Verde, 1:VErmelho,3:Mantêm           //G4 Verde 
0AB0:  BSF    03.5
0AB1:  MOVWF  42
0AB2:  CLRF   43
0AB3:  MOVLW  01
0AB4:  MOVWF  44
0AB5:  MOVLW  03
0AB6:  MOVWF  45
0AB7:  BCF    0A.3
0AB8:  BCF    03.5
0AB9:  CALL   283
0ABA:  BSF    0A.3
....................                  } 
....................                break; 
0ABB:  GOTO   333
....................                 
....................         case 3:if(TIMER_B>=Tempos[12]-Tempos[14]) //Verde mínimo G2 
0ABC:  BSF    03.5
0ABD:  MOVF   3C,W
0ABE:  SUBWF  38,W
0ABF:  MOVWF  77
0AC0:  MOVF   39,W
0AC1:  MOVWF  7A
0AC2:  MOVF   3D,W
0AC3:  BTFSS  03.0
0AC4:  INCFSZ 3D,W
0AC5:  SUBWF  7A,F
0AC6:  MOVF   77,W
0AC7:  MOVWF  78
0AC8:  MOVF   7A,W
0AC9:  BCF    03.5
0ACA:  SUBWF  3F,W
0ACB:  BTFSS  03.0
0ACC:  GOTO   2DD
0ACD:  BTFSS  03.2
0ACE:  GOTO   2D3
0ACF:  MOVF   78,W
0AD0:  SUBWF  3E,W
0AD1:  BTFSS  03.0
0AD2:  GOTO   2DD
....................                   {MEM_I4=0; 
0AD3:  BCF    5A.1
....................                    stepR2=4; 
0AD4:  MOVLW  04
0AD5:  MOVWF  66
....................                    auxTimeR2=Tempos[12]-Tempos[14]; 
0AD6:  BSF    03.5
0AD7:  MOVF   3C,W
0AD8:  SUBWF  38,W
0AD9:  BCF    03.5
0ADA:  MOVWF  68
....................                    TIMER_B=0; 
0ADB:  CLRF   3F
0ADC:  CLRF   3E
....................                   } 
....................                break;         
0ADD:  GOTO   333
....................         case 4:if(TIMER_B>=Tempos[14])  
0ADE:  BSF    03.5
0ADF:  MOVF   3D,W
0AE0:  BCF    03.5
0AE1:  SUBWF  3F,W
0AE2:  BTFSS  03.0
0AE3:  GOTO   315
0AE4:  BTFSS  03.2
0AE5:  GOTO   2EC
0AE6:  BSF    03.5
0AE7:  MOVF   3C,W
0AE8:  BCF    03.5
0AE9:  SUBWF  3E,W
0AEA:  BTFSS  03.0
0AEB:  GOTO   315
....................                  {                 
....................                   auxTimeR2=auxTimeR2+Tempos[14]; 
0AEC:  BSF    03.5
0AED:  MOVF   3C,W
0AEE:  BCF    03.5
0AEF:  ADDWF  68,F
....................                   if((auxTimeR2>Tempos[9] || MEM_I4==0) && !ChamadaAcucar) // Tempos 9 e não 13 porque quero Tmax igual para ambos os sentidos. 
0AF0:  BSF    03.5
0AF1:  MOVF   33,F
0AF2:  BTFSS  03.2
0AF3:  GOTO   2FA
0AF4:  BCF    03.5
0AF5:  MOVF   68,W
0AF6:  BSF    03.5
0AF7:  SUBWF  32,W
0AF8:  BTFSS  03.0
0AF9:  GOTO   2FE
0AFA:  BCF    03.5
0AFB:  BTFSC  5A.1
0AFC:  GOTO   312
0AFD:  BSF    03.5
0AFE:  BCF    03.5
0AFF:  BTFSC  5A.5
0B00:  GOTO   312
....................                     {                    
....................                      stepR2=5; 
0B01:  MOVLW  05
0B02:  MOVWF  66
....................                      TIMER_B=0; 
0B03:  CLRF   3F
0B04:  CLRF   3E
....................                      EstadoGrupos(3,1,1,3); //0: Verde, 1:VErmelho,3:Mantêm        //ALLRED 
0B05:  MOVLW  03
0B06:  BSF    03.5
0B07:  MOVWF  42
0B08:  MOVLW  01
0B09:  MOVWF  43
0B0A:  MOVWF  44
0B0B:  MOVLW  03
0B0C:  MOVWF  45
0B0D:  BCF    0A.3
0B0E:  BCF    03.5
0B0F:  CALL   283
0B10:  BSF    0A.3
....................                     }                 
0B11:  GOTO   315
....................                   else 
....................                     {TIMER_B=0; 
0B12:  CLRF   3F
0B13:  CLRF   3E
....................                      MEM_I4=0; 
0B14:  BCF    5A.1
....................                     } 
....................                  } 
....................                break; 
0B15:  GOTO   333
....................                 
....................         case 5:if(TIMER_B>=Tempos[11]) 
0B16:  BSF    03.5
0B17:  MOVF   37,W
0B18:  BCF    03.5
0B19:  SUBWF  3F,W
0B1A:  BTFSS  03.0
0B1B:  GOTO   333
0B1C:  BTFSS  03.2
0B1D:  GOTO   324
0B1E:  BSF    03.5
0B1F:  MOVF   36,W
0B20:  BCF    03.5
0B21:  SUBWF  3E,W
0B22:  BTFSS  03.0
0B23:  GOTO   333
....................                  {stepR2=0; 
0B24:  CLRF   66
....................                   TIMER_B=0; 
0B25:  CLRF   3F
0B26:  CLRF   3E
....................                   EstadoGrupos(3,1,0,3); //0: Verde, 1:VErmelho,3:Mantêm           //G2 Verde        
0B27:  MOVLW  03
0B28:  BSF    03.5
0B29:  MOVWF  42
0B2A:  MOVLW  01
0B2B:  MOVWF  43
0B2C:  CLRF   44
0B2D:  MOVLW  03
0B2E:  MOVWF  45
0B2F:  BCF    0A.3
0B30:  BCF    03.5
0B31:  CALL   283
0B32:  BSF    0A.3
....................                  } 
....................                break;  
....................         }  
0B33:  BSF    0A.3
0B34:  GOTO   4F5 (RETURN)
....................   } 
....................  
....................  
....................  
....................  
....................  
.................... void main() { 
*
0B4A:  MOVF   03,W
0B4B:  ANDLW  1F
0B4C:  MOVWF  03
0B4D:  CLRF   2C
0B4E:  BSF    03.5
0B4F:  BSF    03.6
0B50:  BCF    07.3
0B51:  MOVLW  40
0B52:  BCF    03.6
0B53:  MOVWF  19
0B54:  MOVLW  A6
0B55:  MOVWF  18
0B56:  MOVLW  90
0B57:  BCF    03.5
0B58:  MOVWF  18
0B59:  CLRF   2D
0B5A:  CLRF   37
0B5B:  BCF    38.0
0B5C:  BSF    38.1
0B5D:  CLRF   39
0B5E:  CLRF   3A
0B5F:  MOVLW  B4
0B60:  MOVWF  3B
0B61:  CLRF   3D
0B62:  CLRF   3C
0B63:  CLRF   3F
0B64:  CLRF   3E
0B65:  CLRF   41
0B66:  CLRF   40
0B67:  CLRF   43
0B68:  CLRF   42
0B69:  CLRF   45
0B6A:  CLRF   44
0B6B:  CLRF   47
0B6C:  CLRF   46
0B6D:  CLRF   49
0B6E:  CLRF   48
0B6F:  CLRF   4B
0B70:  CLRF   4A
0B71:  CLRF   4D
0B72:  CLRF   4C
0B73:  CLRF   4F
0B74:  CLRF   4E
0B75:  CLRF   51
0B76:  CLRF   50
0B77:  CLRF   52
0B78:  CLRF   53
0B79:  CLRF   54
0B7A:  CLRF   55
0B7B:  CLRF   56
0B7C:  CLRF   57
0B7D:  CLRF   58
0B7E:  CLRF   59
0B7F:  BCF    38.2
0B80:  BCF    38.3
0B81:  BCF    38.4
0B82:  BCF    38.5
0B83:  BCF    38.6
0B84:  BCF    38.7
0B85:  BCF    5A.0
0B86:  BCF    5A.1
0B87:  BCF    5A.2
0B88:  CLRF   5B
0B89:  CLRF   5C
0B8A:  CLRF   5D
0B8B:  CLRF   5E
0B8C:  CLRF   5F
0B8D:  BCF    5A.3
0B8E:  CLRF   61
0B8F:  MOVLW  FF
0B90:  MOVWF  60
0B91:  CLRF   63
0B92:  MOVWF  62
0B93:  MOVLW  23
0B94:  MOVWF  64
0B95:  CLRF   65
0B96:  CLRF   66
0B97:  CLRF   67
0B98:  CLRF   68
0B99:  BCF    5A.4
0B9A:  BCF    5A.5
0B9B:  BCF    5A.6
0B9C:  CLRF   6A
0B9D:  CLRF   69
0B9E:  BSF    03.5
0B9F:  BSF    03.6
0BA0:  MOVF   09,W
0BA1:  ANDLW  C0
0BA2:  MOVWF  09
0BA3:  BCF    03.6
0BA4:  BCF    1F.4
0BA5:  BCF    1F.5
0BA6:  MOVLW  00
0BA7:  BSF    03.6
0BA8:  MOVWF  08
0BA9:  BCF    03.5
0BAA:  CLRF   07
0BAB:  CLRF   08
0BAC:  CLRF   09
0BAD:  BCF    03.7
0BAE:  BSF    03.5
0BAF:  BCF    03.6
0BB0:  CLRF   3E
0BB1:  CLRF   3F
0BB2:  CLRF   41
0BB3:  CLRF   40
.................... unsigned int8 i=0,k=0; 
.................... int16 TIMER_A_OLD=0; 
....................  
....................  
.................... set_tris_a(0b00100011); 
0BB4:  MOVLW  23
0BB5:  MOVWF  05
.................... set_tris_b(0x00);              //Configura Porto B como saídas 
0BB6:  MOVLW  00
0BB7:  MOVWF  06
.................... set_tris_c(0b10111111); 
0BB8:  MOVLW  BF
0BB9:  MOVWF  07
....................  
....................  
.................... output_b(0x00); 
0BBA:  BCF    03.5
0BBB:  CLRF   06
.................... setup_adc(ADC_OFF); 
0BBC:  BCF    1F.0
....................  
.................... SETUP_TIMER_1(T1_INTERNAL|T1_DIV_BY_4);  //timer1 16bits 
0BBD:  MOVLW  25
0BBE:  MOVWF  10
.................... SET_TIMER1(3036); 
0BBF:  CLRF   0E
0BC0:  MOVLW  0B
0BC1:  MOVWF  0F
0BC2:  MOVLW  DC
0BC3:  MOVWF  0E
....................  
.................... enable_interrupts(INT_TIMER1); 
0BC4:  BSF    03.5
0BC5:  BSF    0C.0
.................... enable_interrupts(INT_RDA); 
0BC6:  BSF    0C.5
.................... enable_interrupts(global);                 // Habilito Interrupciones 
0BC7:  MOVLW  C0
0BC8:  BCF    03.5
0BC9:  IORWF  0B,F
.................... delay_ms(100); 
0BCA:  MOVLW  64
0BCB:  BSF    03.5
0BCC:  MOVWF  52
0BCD:  BCF    0A.3
0BCE:  BCF    03.5
0BCF:  CALL   1F2
0BD0:  BSF    0A.3
....................  
.................... setup_wdt(WDT_2304MS); 
0BD1:  MOVLW  09
0BD2:  BSF    03.6
0BD3:  MOVWF  05
0BD4:  MOVLW  0F
0BD5:  MOVWF  77
0BD6:  BCF    03.6
0BD7:  CLRF   01
0BD8:  MOVLW  81
0BD9:  MOVWF  04
0BDA:  BCF    03.7
0BDB:  MOVF   00,W
0BDC:  ANDLW  F0
0BDD:  IORLW  07
0BDE:  MOVWF  00
0BDF:  CLRWDT
0BE0:  MOVF   00,W
0BE1:  ANDLW  F7
0BE2:  BTFSC  77.3
0BE3:  ANDLW  F0
0BE4:  IORWF  77,W
0BE5:  MOVWF  00
....................  
.................... fprintf(PORTA,"***Inicio de Funcionamento***\n\r"); 
0BE6:  MOVLW  E2
0BE7:  BSF    03.6
0BE8:  MOVWF  0D
0BE9:  MOVLW  01
0BEA:  MOVWF  0F
0BEB:  BCF    0A.3
0BEC:  BCF    03.6
0BED:  CALL   207
0BEE:  BSF    0A.3
....................  
....................  
.................... // Ler EEPROM 
....................  
....................  
.................... //--------------- LOAD MODE FROM EEPROM -----------------                                                                          
....................  
....................  
....................  
.................... //------------------- LOAD TIMES FROM EEPROM ----------------- 
.................... //k=0; 
.................... //for(i=0;i<16;i++) 
....................   { 
....................    Tempos[i]=MAKE16(read_eeprom (k), read_eeprom (k+1)); 
0BEF:  BCF    03.0
0BF0:  BSF    03.5
0BF1:  RLF    3E,W
0BF2:  ADDLW  A0
0BF3:  MOVWF  04
0BF4:  BCF    03.7
0BF5:  MOVF   3F,W
0BF6:  BCF    03.5
0BF7:  BSF    03.6
0BF8:  MOVWF  0D
0BF9:  BSF    03.5
0BFA:  BCF    0C.7
0BFB:  BSF    0C.0
0BFC:  BCF    03.5
0BFD:  MOVF   0C,W
0BFE:  BSF    03.5
0BFF:  BCF    03.6
0C00:  MOVWF  44
0C01:  MOVLW  01
0C02:  ADDWF  3F,W
0C03:  MOVWF  45
0C04:  MOVF   45,W
0C05:  BCF    03.5
0C06:  BSF    03.6
0C07:  MOVWF  0D
0C08:  BSF    03.5
0C09:  BCF    0C.7
0C0A:  BSF    0C.0
0C0B:  BCF    03.5
0C0C:  MOVF   0C,W
0C0D:  BSF    03.5
0C0E:  BCF    03.6
0C0F:  MOVWF  45
0C10:  INCF   04,F
0C11:  MOVF   44,W
0C12:  MOVWF  00
0C13:  DECF   04,F
0C14:  MOVF   45,W
0C15:  MOVWF  00
....................    delay_ms(2); 
0C16:  MOVLW  02
0C17:  MOVWF  52
0C18:  BCF    0A.3
0C19:  BCF    03.5
0C1A:  CALL   1F2
0C1B:  BSF    0A.3
....................    k=k+2; 
0C1C:  MOVLW  02
0C1D:  BSF    03.5
0C1E:  ADDWF  3F,F
....................   } 
.................... K=0;  //Endereço EEPROM 
0C1F:  CLRF   3F
.................... Tempos[3]=MAKE16(read_eeprom (k), read_eeprom (k+1));   
0C20:  MOVF   3F,W
0C21:  BCF    03.5
0C22:  BSF    03.6
0C23:  MOVWF  0D
0C24:  BSF    03.5
0C25:  BCF    0C.7
0C26:  BSF    0C.0
0C27:  BCF    03.5
0C28:  MOVF   0C,W
0C29:  BSF    03.5
0C2A:  BCF    03.6
0C2B:  MOVWF  42
0C2C:  MOVLW  01
0C2D:  ADDWF  3F,W
0C2E:  MOVWF  43
0C2F:  MOVF   43,W
0C30:  BCF    03.5
0C31:  BSF    03.6
0C32:  MOVWF  0D
0C33:  BSF    03.5
0C34:  BCF    0C.7
0C35:  BSF    0C.0
0C36:  BCF    03.5
0C37:  MOVF   0C,W
0C38:  BSF    03.5
0C39:  BCF    03.6
0C3A:  MOVWF  43
0C3B:  MOVF   42,W
0C3C:  MOVWF  27
0C3D:  MOVF   43,W
0C3E:  MOVWF  26
.................... K=2;  //Endereço EEPROM 
0C3F:  MOVLW  02
0C40:  MOVWF  3F
.................... Tempos[7]=MAKE16(read_eeprom (k), read_eeprom (k+1));  
0C41:  MOVF   3F,W
0C42:  BCF    03.5
0C43:  BSF    03.6
0C44:  MOVWF  0D
0C45:  BSF    03.5
0C46:  BCF    0C.7
0C47:  BSF    0C.0
0C48:  BCF    03.5
0C49:  MOVF   0C,W
0C4A:  BSF    03.5
0C4B:  BCF    03.6
0C4C:  MOVWF  42
0C4D:  MOVLW  01
0C4E:  ADDWF  3F,W
0C4F:  MOVWF  43
0C50:  MOVF   43,W
0C51:  BCF    03.5
0C52:  BSF    03.6
0C53:  MOVWF  0D
0C54:  BSF    03.5
0C55:  BCF    0C.7
0C56:  BSF    0C.0
0C57:  BCF    03.5
0C58:  MOVF   0C,W
0C59:  BSF    03.5
0C5A:  BCF    03.6
0C5B:  MOVWF  43
0C5C:  MOVF   42,W
0C5D:  MOVWF  2F
0C5E:  MOVF   43,W
0C5F:  MOVWF  2E
.................... K=4;  //Endereço EEPROM 
0C60:  MOVLW  04
0C61:  MOVWF  3F
.................... Tempos[9]=MAKE16(read_eeprom (k), read_eeprom (k+1));  
0C62:  MOVF   3F,W
0C63:  BCF    03.5
0C64:  BSF    03.6
0C65:  MOVWF  0D
0C66:  BSF    03.5
0C67:  BCF    0C.7
0C68:  BSF    0C.0
0C69:  BCF    03.5
0C6A:  MOVF   0C,W
0C6B:  BSF    03.5
0C6C:  BCF    03.6
0C6D:  MOVWF  42
0C6E:  MOVLW  01
0C6F:  ADDWF  3F,W
0C70:  MOVWF  43
0C71:  MOVF   43,W
0C72:  BCF    03.5
0C73:  BSF    03.6
0C74:  MOVWF  0D
0C75:  BSF    03.5
0C76:  BCF    0C.7
0C77:  BSF    0C.0
0C78:  BCF    03.5
0C79:  MOVF   0C,W
0C7A:  BSF    03.5
0C7B:  BCF    03.6
0C7C:  MOVWF  43
0C7D:  MOVF   42,W
0C7E:  MOVWF  33
0C7F:  MOVF   43,W
0C80:  MOVWF  32
.................... K=6;  //Endereço EEPROM 
0C81:  MOVLW  06
0C82:  MOVWF  3F
.................... Tempos[11]=MAKE16(read_eeprom (k), read_eeprom (k+1));   
0C83:  MOVF   3F,W
0C84:  BCF    03.5
0C85:  BSF    03.6
0C86:  MOVWF  0D
0C87:  BSF    03.5
0C88:  BCF    0C.7
0C89:  BSF    0C.0
0C8A:  BCF    03.5
0C8B:  MOVF   0C,W
0C8C:  BSF    03.5
0C8D:  BCF    03.6
0C8E:  MOVWF  42
0C8F:  MOVLW  01
0C90:  ADDWF  3F,W
0C91:  MOVWF  43
0C92:  MOVF   43,W
0C93:  BCF    03.5
0C94:  BSF    03.6
0C95:  MOVWF  0D
0C96:  BSF    03.5
0C97:  BCF    0C.7
0C98:  BSF    0C.0
0C99:  BCF    03.5
0C9A:  MOVF   0C,W
0C9B:  BSF    03.5
0C9C:  BCF    03.6
0C9D:  MOVWF  43
0C9E:  MOVF   42,W
0C9F:  MOVWF  37
0CA0:  MOVF   43,W
0CA1:  MOVWF  36
....................   
.................... Tempos[0]=10; 
0CA2:  CLRF   21
0CA3:  MOVLW  0A
0CA4:  MOVWF  20
.................... Tempos[1]=20; 
0CA5:  CLRF   23
0CA6:  MOVLW  14
0CA7:  MOVWF  22
.................... Tempos[2]=6; 
0CA8:  CLRF   25
0CA9:  MOVLW  06
0CAA:  MOVWF  24
.................... //Tempos[3]=20; 
.................... Tempos[4]=10; 
0CAB:  CLRF   29
0CAC:  MOVLW  0A
0CAD:  MOVWF  28
.................... Tempos[5]=20; 
0CAE:  CLRF   2B
0CAF:  MOVLW  14
0CB0:  MOVWF  2A
.................... Tempos[6]=6; 
0CB1:  CLRF   2D
0CB2:  MOVLW  06
0CB3:  MOVWF  2C
.................... //Tempos[7]=20; 
.................... //Tempos[8]=10; 
.................... //Tempos[9]=15; 
.................... Tempos[10]=6; 
0CB4:  CLRF   35
0CB5:  MOVWF  34
.................... //Tempos[11]=20; 
.................... //Tempos[12]=10; 
.................... Tempos[13]=20; 
0CB6:  CLRF   3B
0CB7:  MOVLW  14
0CB8:  MOVWF  3A
.................... Tempos[14]=6; 
0CB9:  CLRF   3D
0CBA:  MOVLW  06
0CBB:  MOVWF  3C
.................... //Tempos[15]=20; 
....................  
....................                            
....................  
.................... //--------------- TRAFFIC LIGHTS START -------------- 
....................  
.................... //SET_TIMER1(3036);  //Restar TimerA 
.................... count_TimerA=0; 
0CBC:  BCF    03.5
0CBD:  CLRF   39
.................... TIMER_A=0;         //TIMER SEGUNDOS 
0CBE:  CLRF   3D
0CBF:  CLRF   3C
.................... TIMER_A_OLD=0; 
0CC0:  BSF    03.5
0CC1:  CLRF   41
0CC2:  CLRF   40
.................... TIMER_A_OLD = TIMER_A; 
0CC3:  BCF    03.5
0CC4:  MOVF   3D,W
0CC5:  BSF    03.5
0CC6:  MOVWF  41
0CC7:  BCF    03.5
0CC8:  MOVF   3C,W
0CC9:  BSF    03.5
0CCA:  MOVWF  40
....................  
.................... output_low(PIN_A2);  //PIN RED Besouro ON 
0CCB:  BCF    03.5
0CCC:  BCF    05.2
.................... output_low(PIN_A3);  //PIN Green Besouro OFF 
0CCD:  BCF    05.3
....................  
....................  
....................  
.................... //**********Start traffic Lights********** 
....................  
.................... EstadoGrupos(1,1,0,0); 
0CCE:  MOVLW  01
0CCF:  BSF    03.5
0CD0:  MOVWF  42
0CD1:  MOVWF  43
0CD2:  CLRF   44
0CD3:  CLRF   45
0CD4:  BCF    0A.3
0CD5:  BCF    03.5
0CD6:  CALL   283
0CD7:  BSF    0A.3
....................  
....................  
.................... restart_wdt(); 
0CD8:  CLRWDT
.................... while(true) 
.................... {   
....................    //RESTART_WDT(); 
....................    if(BufferOK)  //Faz soma de checksum 
0CD9:  BTFSS  38.0
0CDA:  GOTO   4E6
....................      { 
....................       //fprintf(PORTA,"***Buffer***\n\r"); 
....................       delay_ms(2); 
0CDB:  MOVLW  02
0CDC:  BSF    03.5
0CDD:  MOVWF  52
0CDE:  BCF    0A.3
0CDF:  BCF    03.5
0CE0:  CALL   1F2
0CE1:  BSF    0A.3
....................       trata_buffer(); 
0CE2:  BCF    0A.3
0CE3:  GOTO   58E
0CE4:  BSF    0A.3
....................       BufferOK=0; 
0CE5:  BCF    38.0
....................      } 
....................      
.................... restart_wdt(); 
0CE6:  CLRWDT
....................  
.................... if(TIMER_LC>=60 && LinhaComando)        //Reset timer linha comandos 
0CE7:  MOVF   3B,W
0CE8:  SUBLW  3B
0CE9:  BTFSC  03.0
0CEA:  GOTO   4ED
0CEB:  BTFSC  5A.3
....................    {LinhaComando=0; 
0CEC:  BCF    5A.3
....................    } 
....................     
.................... /*if(TIMER_A!=TIMER_A_OLD){  
.................... fprintf(PORTA,"StepR1 = %d \n\r",stepR1); 
.................... fprintf(PORTA,"StepR2 = %d \n\r",stepR2); 
.................... fprintf(PORTA,"MEMI3 = %d \n\r",MEM_I3); 
.................... fprintf(PORTA,"MEMI4 = %d \n\r",MEM_I4); 
.................... fprintf(PORTA,"Chamada Acucar = %d \n\r",ChamadaAcucar); 
.................... fprintf(PORTA,"AuxTimeR2= %d \n\r",auxTimeR2); 
....................  
.................... TIMER_A_OLD=TIMER_A; 
.................... } 
.................... */ 
....................  
.................... output_b(saida); 
0CED:  MOVF   5F,W
0CEE:  MOVWF  06
....................  
....................  
.................... TimeOutTimer=TimeOut;          //IGNORA OK's e Timeout 
0CEF:  MOVF   61,W
0CF0:  MOVWF  63
0CF1:  MOVF   60,W
0CF2:  MOVWF  62
....................  
.................... LER_ENTRADAS(); 
0CF3:  GOTO   000
....................  
.................... ControlLights(); 
0CF4:  GOTO   14F
0CF5:  GOTO   4D9
....................        
....................  
....................    
....................          
.................... } 
.................... } 
....................  
0CF6:  SLEEP
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 2C8A   HS WDT PUT NOMCLR PROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
