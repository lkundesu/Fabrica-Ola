
#include <16f883.h>
#device ADC=10
#fuses HS,WDT,PROTECT,NOLVP,NODEBUG,NOMCLR,NOBROWNOUT
#use delay(clock=10000000)   
#use fast_io(a)
#use fast_io(b)
#use fast_io(c)
#use RS232(baud=9600,xmit=PIN_C6,rcv=PIN_C7,parity=N,errors,stream=PORTA,RESTART_WDT)


//Defines s

#define IN4_DET    PIN_C2      //IN4 -> Detector Peão
#define IN5_DET    PIN_C1      //IN4 -> Detector Peão auxiliar

#define IN6_RC     PIN_C0          //IN6 -> Sinal Regulador Carga(Low discharge ON)
#define IN7_GSM    PIN_A5      //IN7 -> Modo GSM RUN


int8 data_receive=0;

Unsigned int8 Data_Buffer[6];
//int1 status_data=0;
int8 current_data=0;
int1 Carriage_Return=1;
int1 BufferOK=0;

int8 count_TimerA=0;


int16 SetPointNoite=250;
int16 SetPointDia=700;
int16 SetPointBatLow=720; //11,5V  (0,5V steps de 20)
int16 SetPointBatRec=760; //12,5V  
//////////////////////////////
unsigned int8 AddressOrigem=0;
unsigned int8 AddressDestino1=0;
unsigned int8 AddressDestino2=255; //desactivado
unsigned int8 AddressDestino3=255; //desactivado
unsigned int8 AddressDestino4=255; //desactivado
unsigned int8 AddressDestino5=255; //desactivado

int8 Modo=0;  //Modo Funcionamento
int8 Dimming=0;
int8 TempoPeao=15;

int1 dia=0;
int1 diaSL=0;
int1 BatLow=0;
int1 Peao=0;

int1 liga_focos=0;
int1 Reply=0;
int8 starttime=0;
int1 TimeOut=0;


#INT_RDA
void trata_INT_RDA()
{
  output_toggle(PIN_B6);
  data_receive=fgetc(PORTA);
  if(data_receive==35 && Carriage_Return)  //É o '#'  ---Associar um timeout
    {
     TimeOut=0;
     count_TimerA=0;
     current_data=0;
     Data_Buffer[current_data]=data_receive;
     current_data++;
     Carriage_Return=0;
     BufferOK=0; 
    }
  else  
    {
     if(!Carriage_Return)
       {
        if(current_data==5 || TimeOut)        // if(current_data==5)       
          {Data_Buffer[current_data]=data_receive;
           Carriage_Return=1;
           current_data=0;
           bufferOK=1;
           if(Timeout)
              bufferOK=0;
          }
        else
          {Data_Buffer[current_data]=data_receive;
           current_data++;
          }
       }
    }
}


#INT_TIMER1
void trata_t1()         //Passa cá a cada 100ms
{
count_TimerA++;
RESTART_WDT();
if(count_TimerA>25)  //2,5 segundo
  {
   TimeOut=1;
   count_TimerA=0;
   output_toggle(PIN_B7);
  }

set_timer1(3036);
}


void ImprimeMSGRS232(int1 msg) //0:Erro, 1:OK
{
if(!msg)
  {
   fputc('#',PORTA); //STX
   fputc(Data_Buffer[2],PORTA); //Address Destino
   fputc(AddressOrigem,PORTA); //Address Origem
   fputc('E',PORTA); //ERRO
   fputc('R',PORTA); //
  }
else
  {
   fputc('#',PORTA); //STX
   fputc(Data_Buffer[2],PORTA); //Envia resposta p/ destino que enviou msg
   fputc(AddressOrigem,PORTA); 
   fputc('O',PORTA); 
   fputc('K',PORTA);
  }
}




void trata_buffer(){
Unsigned int8 aux_checksum=0;
int8 i=0;
int16 valorADC=0;
int8 valor=0;

delay_ms(10);
aux_checkSum=0;
for(i=1;i<5;i++) 
    aux_checksum=aux_checksum+Data_Buffer[i];
if(aux_checksum<48)
   aux_checksum=aux_checksum+100;


if(Data_Buffer[1]==AddressOrigem)  //Informação é para mim
  {if(aux_checksum!=Data_Buffer[5])           
      ImprimeMSGRS232(0);
   else   
     switch(Data_Buffer[3]){
           case 'O':if(Data_Buffer[4]=='N')
                      {
                       liga_focos=1;
                       Peao=1;
                       starttime=0;
                       ImprimeMSGRS232(1);
                      }
                    else
                      {
                       if(Data_Buffer[4]=='K')      //Chegou resposta de confirmação
                         Reply=1;
                       else
                         ImprimeMSGRS232(0);
                      }
                    break;
           case 'R':if(Data_Buffer[4]=='S')
                      {
                       ImprimeMSGRS232(1);
                       delay_ms(2);
                       reset_cpu();
                      }
                    else
                      ImprimeMSGRS232(0);
                    break;
           case 'M':if(Data_Buffer[2]==25)
                      {write_eeprom (10,Data_Buffer[4]); //Guarda o Modo Funcionamento
                       ImprimeMSGRS232(1);
                      }
                    else
                      ImprimeMSGRS232(0);
                    break;
           case 'D':if(Data_Buffer[2]==25)
                      {write_eeprom (11,Data_Buffer[4]); //Guarda o Modo Funcionamento
                       ImprimeMSGRS232(1);
                      }
                    else
                      ImprimeMSGRS232(0);
                    break; 
           case 'T':if(Data_Buffer[2]==25)
                      {write_eeprom (12,Data_Buffer[4]); //Guarda o Modo Funcionamento
                       ImprimeMSGRS232(1);
                      }
                    else
                      ImprimeMSGRS232(0);
                    break;           
           case '0':if(Data_Buffer[2]==25)
                      {write_eeprom (0,Data_Buffer[4]); //Guarda o Modo Funcionamento
                       ImprimeMSGRS232(1);
                      }
                    else
                      ImprimeMSGRS232(0);
                    break;           
           case '1':if(Data_Buffer[2]==25)
                      {write_eeprom (1,Data_Buffer[4]); 
                       ImprimeMSGRS232(1);
                      }
                    else
                      ImprimeMSGRS232(0);
                    break;         
           case '2':if(Data_Buffer[2]==25)
                      {write_eeprom (2,Data_Buffer[4]); //Guarda o Modo Funcionamento
                       ImprimeMSGRS232(1);
                      }
                    else
                      ImprimeMSGRS232(0);
                    break;          
           case '3':if(Data_Buffer[2]==25)
                      {write_eeprom (3,Data_Buffer[4]); //Guarda o Modo Funcionamento
                       ImprimeMSGRS232(1);
                      }
                    else
                      ImprimeMSGRS232(0);
                    break;            
           case '4':if(Data_Buffer[2]==25)
                      {write_eeprom (4,Data_Buffer[4]); //Guarda o Modo Funcionamento
                       ImprimeMSGRS232(1);
                      }
                    else
                      ImprimeMSGRS232(0);
                    break;           
           case '5':if(Data_Buffer[2]==25)
                      {write_eeprom (5,Data_Buffer[4]); //Guarda o Modo Funcionamento
                       ImprimeMSGRS232(1);
                      }
                    else
                      ImprimeMSGRS232(0);
                    break;
           case '6':if(Data_Buffer[2]==25)
                      {
                       set_adc_channel(1); 
                       delay_ms(1);
                       valorADC=read_adc();
                       if(valorADC>260)
                         {valorADC=valorADC-260;
                          valorADC=valorADC/4;
                         } 
                       else
                         valorADC=0;
                       valor=(int8)valorADC;  
                       fputc('#',PORTA); //STX
                       fputc(Data_Buffer[2],PORTA); //Envia resposta p/ destino que enviou msg
                       fputc(AddressOrigem,PORTA); 
                       fputc(valor,PORTA); 
                       if(BatLow)
                         fputc('1',PORTA);
                       else
                         fputc('0',PORTA); 
                      }
                   else
                      ImprimeMSGRS232(0);
                    break;
           case '7':if(Data_Buffer[2]==25)
                     {
                       set_adc_channel(0);                                //Sensor Luz
                       delay_us(10);
                       valorADC=read_adc();
                       if(valorADC>=5)
                          valorADC=valorADC/5;  //Escala 0-205
                       else
                          valorADC=0;
                       valor=(int8)valorADC;
                       fputc('#',PORTA); //STX
                       fputc(Data_Buffer[2],PORTA); //Envia resposta p/ destino que enviou msg
                       fputc(AddressOrigem,PORTA); 
                       fputc(valor,PORTA);
                       
                       if(diaSL)
                          fputc('1',PORTA);
                       else
                          fputc('0',PORTA);
                       
                     }else
                        ImprimeMSGRS232(0);
                    break;   
           default:ImprimeMSGRS232(0);
                   break; 
        }

  }
else
 ImprimeMSGRS232(0); 
}





void ler_adcs()
{int16 value1=0,value2=0;
 

set_adc_channel(0);                                //Sensor Luz
delay_ms(1);
value1=read_adc();

if(value1<=SetPointNoite)
  {dia=0;
   diaSL=0;
  } 
if(value1>=SetPointDia)
  {dia=1;
   diaSL=1;
  } 

delay_ms(1);

set_adc_channel(1);                              //Sensor Tensão
delay_us(10);
value2=read_adc();  
if(value2<SetPointBatLow)
   BatLow=1; 
else
   if(value2>SetPointBatRec && BatLow)  //Se ainda não chegou ao reconect
      BatLow=0;
        

if(BatLow)
  dia=0;
   
 
//------------------------Se bat<BatLow faz brilho do mínimo


//fprintf(PORTA,"Vbat=%Lu, Vluz=%Lu\n\r",value2,value1);
//fprintf(PORTA,"SPBatLow=%Lu, PWMBatLow=%u,SPBatRec=%Lu\n\r",SetPointBatLow,PWMONBatLow,SetPointBatRec);
}








void ler_entradas(){

 
if(!input(IN4_DET))       // Detector PIR
  {delay_ms(1);
   if(!input(IN4_DET))
     Peao=1;
  }    

//if(input(IN5_DET))       // Detector PIR
//  {delay_ms(1);
//   if(input(IN5_DET))
//     Peao=1;
//  }   



}


void modo_normal(int1 type) //0: Normal, 1->flash longo
{
int8 i=0;
int8 aux=0;


switch(dimming){
      case 0:if(!type)
               aux=50;
             else
               aux=100;
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00001111);
                 if(dia)
                   {delay_ms(1);
                    delay_us(250);
                    output_b(0x00);
                    delay_us(750);
                   }
                 else
                   {
                   delay_us(750);
                   output_b(0x00);
                   delay_ms(1);
                   delay_us(250);
                   } 
                }
             if(!type)
               delay_ms(900);
             else
               delay_ms(800);
             break;  
      case 1:if(!type)
               aux=50;
             else
               aux=100;
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00001111);
                 if(dia)
                   {delay_ms(1);
                    output_b(0x00);
                    delay_ms(1);
                   }
                 else
                  {
                  delay_us(500);
                  output_b(0x00);
                  delay_ms(1);
                  delay_us(500);
                  }
                }    
             if(!type)
               delay_ms(900);
             else
               delay_ms(800);
             break; 
      case 2:if(!type)
               aux=50;
             else
               aux=100;
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00001111);
                 if(dia)
                   {
                    delay_us(750);
                    output_b(0x00);
                    delay_ms(1);
                    delay_us(250);
                   }
                 else
                   {
                   delay_us(250);
                   output_b(0x00);
                   delay_ms(1);
                   delay_us(750);
                   }
                }
             if(!type)
               delay_ms(900);
             else
               delay_ms(800);
             break;     
      case 3:if(!type)
               aux=50;
             else
               aux=100;
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00001111);
                 if(dia)
                   {
                   delay_ms(1);
                   delay_us(500);
                   output_b(0x00);
                   delay_us(500);
                   }
                 else
                  {
                  delay_ms(1);
                  output_b(0x00);
                  delay_ms(1);
                  }
                }
             if(!type)
               delay_ms(900);
             else
               delay_ms(800);
             break; 
      case 4:if(!type)
               aux=50;
             else
               aux=100;
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00001111);
                 if(dia)
                   delay_ms(2);
                 else
                  {
                  delay_us(250);
                  output_b(0x00);
                  delay_us(750); 
                  }
                }
             output_b(0x00);   
             if(!type)
               delay_ms(900);
             else
               delay_ms(800);
             break; 

   }
}


void modo_FlashDuplo(int1 type) //0: Normal, 1->flash longo
{
int8 i=0;
int8 aux=0;


switch(dimming){
      case 0:if(!type)
               aux=50;
             else
               aux=100;
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00001111);
                 if(dia)
                   {
                    delay_ms(1);
                    delay_us(250);
                    output_b(0x00);
                    delay_us(750);
                   }
                  else
                   {
                    delay_us(750);
                    output_b(0x00);
                    delay_ms(1);
                    delay_us(250); 
                   }
                } 
             delay_ms(75);   
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00001111);
                 if(dia)
                   {
                    delay_ms(1);
                    delay_us(250);
                    output_b(0x00);
                    delay_us(750);
                   }
                 else
                  {
                   delay_us(750);
                   output_b(0x00);
                   delay_ms(1);
                   delay_us(250);  
                  }
                }   
                
             if(!type)
               delay_ms(725);
             else
               delay_ms(625);
             break;  
      case 1:if(!type)
               aux=50;
             else
               aux=100;
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00001111);
                 if(dia)
                   {
                   delay_ms(1);
                   output_b(0x00);
                   delay_ms(1);
                   }
                 else
                  {
                   delay_us(500);
                   output_b(0x00);
                   delay_ms(1);
                   delay_us(500);
                  }
                }
             delay_ms(75);
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00001111);
                 if(dia)
                   {
                   delay_ms(1);
                   output_b(0x00);
                   delay_ms(1);
                   }
                 else
                  {
                   delay_us(500);
                   output_b(0x00);
                   delay_ms(1);
                   delay_us(500);
                  }
                }
             if(!type)
               delay_ms(800);
             else
               delay_ms(700);
             break; 
      case 2:if(!type)
               aux=50;
             else
               aux=100;
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00001111);
                 if(dia)
                   {
                   delay_us(750);
                   output_b(0x00);
                   delay_ms(1);
                   delay_us(250);
                   }
                 else
                  {
                  delay_us(250);
                  output_b(0x00);
                  delay_ms(1);
                  delay_us(750);  
                  }       
                }
             delay_ms(75);
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00001111);
                 if(dia)
                   {
                   delay_us(750);
                   output_b(0x00);
                   delay_ms(1);
                   delay_us(250);
                   }
                 else
                  {
                  delay_us(250);
                  output_b(0x00);
                  delay_ms(1);
                  delay_us(750);
                  }
                }
             if(!type)
               delay_ms(725);
             else
               delay_ms(625);
             break;     
      case 3:if(!type)
               aux=50;
             else
               aux=100;
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00001111);
                 if(dia)
                   {
                   delay_ms(1);
                   delay_us(500);
                   output_b(0x00);
                   delay_us(500);
                   }
                 else
                   {
                   delay_ms(1);
                   output_b(0x00);
                   delay_ms(1);
                   }
                }
             delay_ms(75);
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00001111);
                 if(dia)
                   {
                   delay_ms(1);
                   delay_us(500);
                   output_b(0x00);
                   delay_us(500);
                   }
                 else
                   {
                   delay_ms(1);
                   output_b(0x00);
                   delay_ms(1);
                   }
                }
             if(!type)
               delay_ms(725);
             else
               delay_ms(625);
             break; 
      case 4:if(!type)
               aux=50;
             else
               aux=100;
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00001111);
                 if(dia)
                   delay_ms(2);
                 else
                  {
                  delay_ms(1);
                  delay_us(250);
                  output_b(0x00);
                  delay_us(750);
                  }
                }
             output_b(0x00);   
             if(!type)
               delay_ms(725);
             else
               delay_ms(625);
             break; 

   }
}


void modo_Alternado(int1 type) //0: Normal, 1->rápido
{
int8 i=0;
int8 aux=0;

 switch(dimming){
      case 0:if(!type)
               aux=250;
             else
               aux=100;
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00000101);
                 if(dia)
                   {
                   delay_ms(1);
                   delay_us(250);
                   output_b(0x00);
                   delay_us(750);
                   }
                 else
                   {
                   delay_us(750);
                   output_b(0x00);
                   delay_ms(1);
                   delay_us(250);               
                   }
                }
             if(type)
                delay_ms(200);
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00001010);
                 if(dia)
                   {
                   delay_ms(1);
                   delay_us(250);
                   output_b(0x00);
                   delay_us(750);
                   }
                 else
                  {
                   delay_us(750);
                   output_b(0x00);
                   delay_ms(1);
                   delay_us(250);
                  }
                }     
             if(type)
               delay_ms(200);
             else
               delay_ms(10);
             break;  
      case 1:if(!type)
               aux=250;
             else
               aux=100;
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00000101);
                 if(dia)
                   {
                   delay_ms(1);
                   output_b(0x00);
                   delay_ms(1);
                   }
                 else
                   {
                   delay_us(500);
                   output_b(0x00);
                   delay_ms(1);
                   delay_us(500);
                   } 
                }
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00001010);
                 if(dia)
                   {
                   delay_ms(1);
                   output_b(0x00);
                   delay_ms(1);
                   }
                 else
                   {
                   delay_us(500);
                   output_b(0x00);
                   delay_ms(1);
                   delay_us(500);
                   }
                }   
             if(type)
               delay_ms(600);
             else
               delay_ms(10);
             break; 
      case 2:if(!type)
               aux=250;
             else
               aux=100;
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00000101);
                 if(dia)
                   {
                   delay_us(750);
                   output_b(0x00);
                   delay_ms(1);
                   delay_us(250);
                   }
                 else
                   {
                   delay_us(250);
                   output_b(0x00);
                   delay_ms(1);
                   delay_us(750);                  
                   }
                }
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00001010);
                 if(dia)
                   {
                   delay_us(750);
                   output_b(0x00);
                   delay_ms(1);
                   delay_us(250);
                   }
                 else
                   {
                   delay_us(250);
                   output_b(0x00);
                   delay_ms(1);
                   delay_us(750);                  
                   }
                }   
             if(type)
               delay_ms(600);
             else
               delay_ms(10);
             break;     
      case 3:if(!type)
               aux=250;
             else
               aux=100;
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00000101);
                 if(dia)
                   {
                   delay_ms(1);
                   delay_us(500);
                   output_b(0x00);
                   delay_us(500);
                   }
                 else
                   {
                   delay_ms(1);
                   output_b(0x00);
                   delay_ms(1);
                   }
                }
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00001010);
                 if(dia)
                   {
                   delay_ms(1);
                   delay_us(500);
                   output_b(0x00);
                   delay_us(500);
                   }
                 else
                   {
                   delay_ms(1);
                   output_b(0x00);
                   delay_ms(1);
                   }
                }   
             if(type)
               delay_ms(600);
             else
               delay_ms(10);
             break; 
      case 4:if(!type)
               aux=250;
             else
               aux=100;
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00000101);
                 if(dia)
                   delay_ms(2);
                 else
                   {
                    delay_ms(1);
                    delay_us(250);
                    output_b(0x00);
                    delay_us(750);
                   }
                }
             for(i=0;i<aux;i++)           //100ms ON se tipe=0, else 200ms
                {
                 output_b(0b00001010);
                 if(dia)
                   delay_ms(2);
                 else
                   {
                    delay_ms(1);
                    delay_us(250);
                    output_b(0x00);
                    delay_us(750);
                   }
                }   
               
             if(type)
               delay_ms(600);
             else
               delay_ms(10);
             break; 

   }
}


void activar_leds_RF(int1 SemConf)
{
int8 i=0;
int16 k=0;
int1 aux=0;
unsigned int8 soma=0;

if(AddressDestino1!=255)
  while(true)
    {
     Reply=0;
     fputc('#',PORTA); //STX
     fputc(AddressDestino1,PORTA); //Envia resposta p/ destino que enviou msg
     fputc(AddressOrigem,PORTA); 
     fputc('O',PORTA); 
     fputc('N',PORTA);
     soma=AddressDestino1+AddressOrigem+79+78;
     fputc(soma,PORTA);
     delay_ms(10);
     k=0;
     if(!SemConf)
        while(true)
             {
              if(BufferOK)  
                {
                 trata_buffer();
                 BufferOK=0;
                }
              if(Reply)
                {aux=1;
                 Reply=0;
                 break;
                }
            
              delay_ms(10);
              k=k+1;
              if(k==30)     //0,3seg p/ aguardar resposta
                break;
             }
      if(i==3 || aux)
        break;   //já recebeu msg
      i=i+1;
    }

if(AddressDestino2!=255)
  while(true)
    {
     Reply=0;
     fputc('#',PORTA); //STX
     fputc(AddressDestino2,PORTA); //Envia resposta p/ destino que enviou msg
     fputc(AddressOrigem,PORTA); 
     fputc('O',PORTA); 
     fputc('N',PORTA);
     soma=AddressDestino1+AddressOrigem+79+78;
     fputc(soma,PORTA);
     delay_ms(10);
     k=0;
     if(!SemConf)
        while(true)
             {
              if(BufferOK)  //Faz soma de checksum
                {
                 trata_buffer();
                 BufferOK=0;
                }
              if(Reply)
                {aux=1;
                 Reply=0;
                 break;
                }
            
              delay_ms(10);
              k=k+1;
              if(k==30)     //0,3seg p/ aguardar resposta
                break;
             }
      if(i==3 || aux)
        break;   //já recebeu msg
      i=i+1;
    }

if(AddressDestino3!=255)
  while(true)
    {
     Reply=0;
     fputc('#',PORTA); //STX
     fputc(AddressDestino3,PORTA); //Envia resposta p/ destino que enviou msg
     fputc(AddressOrigem,PORTA); 
     fputc('O',PORTA); 
     fputc('N',PORTA);
     soma=AddressDestino1+AddressOrigem+79+78;
     fputc(soma,PORTA);
     delay_ms(10);
     k=0;
     if(!SemConf)
        while(true)
             {
              if(BufferOK)  //Faz soma de checksum
                {
                 trata_buffer();
                 BufferOK=0;
                }
              if(Reply)
                {aux=1;
                 Reply=0;
                 break;
                }
            
              delay_ms(10);
              k=k+1;
              if(k==30)     //0,3seg p/ aguardar resposta
                break;
             }
      if(i==3 || aux)
        break;   //já recebeu msg
      i=i+1;
    }

if(AddressDestino4!=255)
  while(true)
    {
     Reply=0;
     fputc('#',PORTA); //STX
     fputc(AddressDestino4,PORTA); //Envia resposta p/ destino que enviou msg
     fputc(AddressOrigem,PORTA); 
     fputc('O',PORTA); 
     fputc('N',PORTA);
     soma=AddressDestino1+AddressOrigem+79+78;
     fputc(soma,PORTA);
     delay_ms(10);
     k=0;
     if(!SemConf)
        while(true)
             {
              if(BufferOK)  //Faz soma de checksum
                {
                 trata_buffer();
                 BufferOK=0;
                }
              if(Reply)
                {aux=1;
                 Reply=0;
                 break;
                }
            
              delay_ms(10);
              k=k+1;
              if(k==30)     //0,3seg p/ aguardar resposta
                break;
             }
      if(i==3 || aux)
        break;   //já recebeu msg
      i=i+1;
    }


if(AddressDestino5!=255)
  while(true)
    {
     Reply=0;
     fputc('#',PORTA); //STX
     fputc(AddressDestino5,PORTA); //Envia resposta p/ destino que enviou msg
     fputc(AddressOrigem,PORTA); 
     fputc('O',PORTA); 
     fputc('N',PORTA);
     delay_ms(10);
     k=0;
     if(!SemConf)
        while(true)
             {
              if(BufferOK)  //Faz soma de checksum
                {
                 trata_buffer();
                 BufferOK=0;
                }
              if(Reply)
                {aux=1;
                 Reply=0;
                 break;
                }
            
              delay_ms(10);
              k=k+1;
              if(k==30)     //0,3seg p/ aguardar resposta
                break;
             }
      if(i==3 || aux)
        break;   //já recebeu msg
      i=i+1;
    }



}



void main() {

set_tris_a(0b00110011);
set_tris_b(0x00);              //Configura Porto B como saídas
set_tris_c(0b10111111);

set_tris_b(0x00);//Configura PortoB como saídas
setup_adc(ADC_CLOCK_DIV_8);
SETUP_ADC_PORTS(3);


SETUP_TIMER_1(T1_INTERNAL|T1_DIV_BY_4);  //timer1 16bits
SET_TIMER1(3036);

SETUP_WDT(WDT_ON);
SETUP_WDT(WDT_2304MS);
RESTART_WDT();

enable_interrupts(INT_TIMER1);
enable_interrupts(INT_RDA);
enable_interrupts(global);                 // Habilito Interrupciones
delay_ms(100);

//output_b(0x00);
//output_c(0x00);

output_b(0x00);
delay_ms(50);
output_b(0xFF);
delay_ms(50);
output_b(0x00);
fprintf(PORTA,"Inicio de Funcionamento\n\r");

//
// Ler EEPROM
AddressOrigem=read_eeprom(0);
if(AddressOrigem>20)
   AddressOrigem=0;
  
AddressDestino1=read_eeprom(1);
if(AddressDestino1>20)
   AddressDestino1=0;
   
AddressDestino2=read_eeprom(2);
if(AddressDestino2>20)
   AddressDestino2=255;

AddressDestino3=read_eeprom(3);
if(AddressDestino3>20)
   AddressDestino3=255;

AddressDestino4=read_eeprom(4);
if(AddressDestino4>20)
   AddressDestino4=255;
   
AddressDestino5=read_eeprom(5);
if(AddressDestino5>20)
   AddressDestino5=255;
   
Modo=read_eeprom(10);   
if(Modo>5)
  Modo=0;

Dimming=read_eeprom(11);   
if(Dimming>4)
  Dimming=0;

TempoPeao=read_eeprom(12);   
if(TempoPeao>50)
   TempoPeao=15;

dia=1;


starttime=0;

Peao=0;
while(true)
{  
   RESTART_WDT();
   if(BufferOK)  //Faz soma de checksum
     {
      delay_ms(50);
      trata_buffer();
      BufferOK=0;
     }
    
   
    ler_adcs();
    Ler_entradas();
    
    if(Peao)
      {
       Peao=0;
       if(!liga_focos)   // Senão foi pedido
          activar_leds_RF(0);  //Vai enviar sinal peão p/ outro safetycross         
       liga_focos=0;  
       for(starttime=0;starttime<TempoPeao;starttime++)
          {
          switch(Modo){  //T -> 1 segundo
                case 0:modo_normal(0); //0: Normal, 1->flash longo
                       break;
                case 1:modo_normal(1); //0: Normal, 1->flash longo
                       break;      
                case 2:modo_FlashDuplo(0); //0: Normal, 1->flash longo
                       break;
                case 3:modo_FlashDuplo(1); //0: Normal, 1->flash longo
                       break;
                case 4:modo_Alternado(0); //0: Normal, 1->Rápido
                       break;
                case 5:modo_Alternado(1); //0: Normal, 1->Rápido
                       break;
                     }
          output_b(0x00);
          Ler_entradas();
          if(BufferOK)  //Faz soma de checksum
             {
              trata_buffer();
              BufferOK=0;
             }
          if(Peao && !liga_focos)
             {activar_leds_RF(1);  //Vai enviar sinal peão p/ outro safetycross  // sem pedido confirmação
              liga_focos=0;
             }
          if(Peao)
            {
             Peao=0;
             liga_focos=0;
             starttime=0;
            }
          
          }
       Peao=0;
       liga_focos=0;
      }

}
}
